
main.out:     file format elf32-i386


Disassembly of section .init:

08048314 <_init>:
 8048314:	53                   	push   %ebx
 8048315:	83 ec 08             	sub    $0x8,%esp
 8048318:	e8 c3 00 00 00       	call   80483e0 <__x86.get_pc_thunk.bx>
 804831d:	81 c3 e3 1c 00 00    	add    $0x1ce3,%ebx
 8048323:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8048329:	85 c0                	test   %eax,%eax
 804832b:	74 05                	je     8048332 <_init+0x1e>
 804832d:	e8 3e 00 00 00       	call   8048370 <__gmon_start__@plt>
 8048332:	83 c4 08             	add    $0x8,%esp
 8048335:	5b                   	pop    %ebx
 8048336:	c3                   	ret    

Disassembly of section .plt:

08048340 <printf@plt-0x10>:
 8048340:	ff 35 04 a0 04 08    	pushl  0x804a004
 8048346:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804834c:	00 00                	add    %al,(%eax)
	...

08048350 <printf@plt>:
 8048350:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 8048356:	68 00 00 00 00       	push   $0x0
 804835b:	e9 e0 ff ff ff       	jmp    8048340 <_init+0x2c>

08048360 <puts@plt>:
 8048360:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048366:	68 08 00 00 00       	push   $0x8
 804836b:	e9 d0 ff ff ff       	jmp    8048340 <_init+0x2c>

08048370 <__gmon_start__@plt>:
 8048370:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048376:	68 10 00 00 00       	push   $0x10
 804837b:	e9 c0 ff ff ff       	jmp    8048340 <_init+0x2c>

08048380 <exit@plt>:
 8048380:	ff 25 18 a0 04 08    	jmp    *0x804a018
 8048386:	68 18 00 00 00       	push   $0x18
 804838b:	e9 b0 ff ff ff       	jmp    8048340 <_init+0x2c>

08048390 <__libc_start_main@plt>:
 8048390:	ff 25 1c a0 04 08    	jmp    *0x804a01c
 8048396:	68 20 00 00 00       	push   $0x20
 804839b:	e9 a0 ff ff ff       	jmp    8048340 <_init+0x2c>

080483a0 <putchar@plt>:
 80483a0:	ff 25 20 a0 04 08    	jmp    *0x804a020
 80483a6:	68 28 00 00 00       	push   $0x28
 80483ab:	e9 90 ff ff ff       	jmp    8048340 <_init+0x2c>

Disassembly of section .text:

080483b0 <_start>:
 80483b0:	31 ed                	xor    %ebp,%ebp
 80483b2:	5e                   	pop    %esi
 80483b3:	89 e1                	mov    %esp,%ecx
 80483b5:	83 e4 f0             	and    $0xfffffff0,%esp
 80483b8:	50                   	push   %eax
 80483b9:	54                   	push   %esp
 80483ba:	52                   	push   %edx
 80483bb:	68 b0 86 04 08       	push   $0x80486b0
 80483c0:	68 40 86 04 08       	push   $0x8048640
 80483c5:	51                   	push   %ecx
 80483c6:	56                   	push   %esi
 80483c7:	68 10 86 04 08       	push   $0x8048610
 80483cc:	e8 bf ff ff ff       	call   8048390 <__libc_start_main@plt>
 80483d1:	f4                   	hlt    
 80483d2:	66 90                	xchg   %ax,%ax
 80483d4:	66 90                	xchg   %ax,%ax
 80483d6:	66 90                	xchg   %ax,%ax
 80483d8:	66 90                	xchg   %ax,%ax
 80483da:	66 90                	xchg   %ax,%ax
 80483dc:	66 90                	xchg   %ax,%ax
 80483de:	66 90                	xchg   %ax,%ax

080483e0 <__x86.get_pc_thunk.bx>:
 80483e0:	8b 1c 24             	mov    (%esp),%ebx
 80483e3:	c3                   	ret    
 80483e4:	66 90                	xchg   %ax,%ax
 80483e6:	66 90                	xchg   %ax,%ax
 80483e8:	66 90                	xchg   %ax,%ax
 80483ea:	66 90                	xchg   %ax,%ax
 80483ec:	66 90                	xchg   %ax,%ax
 80483ee:	66 90                	xchg   %ax,%ax

080483f0 <deregister_tm_clones>:
 80483f0:	b8 2f a0 04 08       	mov    $0x804a02f,%eax
 80483f5:	2d 2c a0 04 08       	sub    $0x804a02c,%eax
 80483fa:	83 f8 06             	cmp    $0x6,%eax
 80483fd:	77 01                	ja     8048400 <deregister_tm_clones+0x10>
 80483ff:	c3                   	ret    
 8048400:	b8 00 00 00 00       	mov    $0x0,%eax
 8048405:	85 c0                	test   %eax,%eax
 8048407:	74 f6                	je     80483ff <deregister_tm_clones+0xf>
 8048409:	55                   	push   %ebp
 804840a:	89 e5                	mov    %esp,%ebp
 804840c:	83 ec 18             	sub    $0x18,%esp
 804840f:	c7 04 24 2c a0 04 08 	movl   $0x804a02c,(%esp)
 8048416:	ff d0                	call   *%eax
 8048418:	c9                   	leave  
 8048419:	c3                   	ret    
 804841a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08048420 <register_tm_clones>:
 8048420:	b8 2c a0 04 08       	mov    $0x804a02c,%eax
 8048425:	2d 2c a0 04 08       	sub    $0x804a02c,%eax
 804842a:	c1 f8 02             	sar    $0x2,%eax
 804842d:	89 c2                	mov    %eax,%edx
 804842f:	c1 ea 1f             	shr    $0x1f,%edx
 8048432:	01 d0                	add    %edx,%eax
 8048434:	d1 f8                	sar    %eax
 8048436:	75 01                	jne    8048439 <register_tm_clones+0x19>
 8048438:	c3                   	ret    
 8048439:	ba 00 00 00 00       	mov    $0x0,%edx
 804843e:	85 d2                	test   %edx,%edx
 8048440:	74 f6                	je     8048438 <register_tm_clones+0x18>
 8048442:	55                   	push   %ebp
 8048443:	89 e5                	mov    %esp,%ebp
 8048445:	83 ec 18             	sub    $0x18,%esp
 8048448:	89 44 24 04          	mov    %eax,0x4(%esp)
 804844c:	c7 04 24 2c a0 04 08 	movl   $0x804a02c,(%esp)
 8048453:	ff d2                	call   *%edx
 8048455:	c9                   	leave  
 8048456:	c3                   	ret    
 8048457:	89 f6                	mov    %esi,%esi
 8048459:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048460 <__do_global_dtors_aux>:
 8048460:	80 3d 2c a0 04 08 00 	cmpb   $0x0,0x804a02c
 8048467:	75 13                	jne    804847c <__do_global_dtors_aux+0x1c>
 8048469:	55                   	push   %ebp
 804846a:	89 e5                	mov    %esp,%ebp
 804846c:	83 ec 08             	sub    $0x8,%esp
 804846f:	e8 7c ff ff ff       	call   80483f0 <deregister_tm_clones>
 8048474:	c6 05 2c a0 04 08 01 	movb   $0x1,0x804a02c
 804847b:	c9                   	leave  
 804847c:	f3 c3                	repz ret 
 804847e:	66 90                	xchg   %ax,%ax

08048480 <frame_dummy>:
 8048480:	a1 10 9f 04 08       	mov    0x8049f10,%eax
 8048485:	85 c0                	test   %eax,%eax
 8048487:	74 1f                	je     80484a8 <frame_dummy+0x28>
 8048489:	b8 00 00 00 00       	mov    $0x0,%eax
 804848e:	85 c0                	test   %eax,%eax
 8048490:	74 16                	je     80484a8 <frame_dummy+0x28>
 8048492:	55                   	push   %ebp
 8048493:	89 e5                	mov    %esp,%ebp
 8048495:	83 ec 18             	sub    $0x18,%esp
 8048498:	c7 04 24 10 9f 04 08 	movl   $0x8049f10,(%esp)
 804849f:	ff d0                	call   *%eax
 80484a1:	c9                   	leave  
 80484a2:	e9 79 ff ff ff       	jmp    8048420 <register_tm_clones>
 80484a7:	90                   	nop
 80484a8:	e9 73 ff ff ff       	jmp    8048420 <register_tm_clones>

080484ad <demo1>:
#include <stdlib.h>
#include "error.h"
#include "errtmr.h"

void demo1()
{
 80484ad:	55                   	push   %ebp
 80484ae:	89 e5                	mov    %esp,%ebp
 80484b0:	83 ec 28             	sub    $0x28,%esp
    error_t err = ERROR_T(ERROR_TIMER_ALLOC_NOTIMER);             // 错误码
 80484b3:	c7 45 f4 02 00 07 80 	movl   $0x80070002,-0xc(%ebp)
    
    printf("Module Timer: %X\n", MODULE_TIMER);                   // 直接打印出模块id
 80484ba:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
 80484c1:	00 
 80484c2:	c7 04 24 d0 86 04 08 	movl   $0x80486d0,(%esp)
 80484c9:	e8 82 fe ff ff       	call   8048350 <printf@plt>
    printf("Error Sample: %X\n", err);                            // 错误码
 80484ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80484d1:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484d5:	c7 04 24 e2 86 04 08 	movl   $0x80486e2,(%esp)
 80484dc:	e8 6f fe ff ff       	call   8048350 <printf@plt>
    printf("Error Mark: %X\n", (err & ERROR_MARK) != 0);          // 是不是错误码，是：1，不是：0
 80484e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80484e4:	c1 e8 1f             	shr    $0x1f,%eax
 80484e7:	0f b6 c0             	movzbl %al,%eax
 80484ea:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484ee:	c7 04 24 f4 86 04 08 	movl   $0x80486f4,(%esp)
 80484f5:	e8 56 fe ff ff       	call   8048350 <printf@plt>
    printf("Module ID: %X\n", MODULE_ID(err));                    // 模块id，看与上面 MODULE_TIMER 是不是一样
 80484fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80484fd:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
 8048502:	c1 f8 10             	sar    $0x10,%eax
 8048505:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048509:	c7 04 24 04 87 04 08 	movl   $0x8048704,(%esp)
 8048510:	e8 3b fe ff ff       	call   8048350 <printf@plt>
    printf("Module Error ID: %X\n", MODULE_ERROR(err));           // 模块错误号  
 8048515:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048518:	0f b7 c0             	movzwl %ax,%eax
 804851b:	89 44 24 04          	mov    %eax,0x4(%esp)
 804851f:	c7 04 24 13 87 04 08 	movl   $0x8048713,(%esp)
 8048526:	e8 25 fe ff ff       	call   8048350 <printf@plt>
}
 804852b:	c9                   	leave  
 804852c:	c3                   	ret    

0804852d <do_task>:

// 函数名 [文件名:行数] 错误码
#define LOG(f, e)  printf("%s [%s:%d] => %X\n", #f, __FILE__, __LINE__, e)

int do_task()
{
 804852d:	55                   	push   %ebp
 804852e:	89 e5                	mov    %esp,%ebp
    // ... ... 
    
    return ERROR_T(ERROR_TIMER_STATE_INVSTATE);   //ERROR_T(ERROR_TIMER_STATE_INVSTATE) 或者 return 0;
 8048530:	b8 0a 00 07 80       	mov    $0x8007000a,%eax
}
 8048535:	5d                   	pop    %ebp
 8048536:	c3                   	ret    

08048537 <sub_func>:

int sub_func()
{
 8048537:	55                   	push   %ebp
 8048538:	89 e5                	mov    %esp,%ebp
 804853a:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
 804853d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    ret = do_task();
 8048544:	e8 e4 ff ff ff       	call   804852d <do_task>
 8048549:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
	// 是错误码的情况
    if(ret & ERROR_MARK)
 804854c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8048550:	79 2b                	jns    804857d <sub_func+0x46>
        LOG(sub_func, ret);
 8048552:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048555:	89 44 24 10          	mov    %eax,0x10(%esp)
 8048559:	c7 44 24 0c 2d 00 00 	movl   $0x2d,0xc(%esp)
 8048560:	00 
 8048561:	c7 44 24 08 28 87 04 	movl   $0x8048728,0x8(%esp)
 8048568:	08 
 8048569:	c7 44 24 04 2f 87 04 	movl   $0x804872f,0x4(%esp)
 8048570:	08 
 8048571:	c7 04 24 38 87 04 08 	movl   $0x8048738,(%esp)
 8048578:	e8 d3 fd ff ff       	call   8048350 <printf@plt>
    
    // return 0 for no exception
    return ret; 
 804857d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 8048580:	c9                   	leave  
 8048581:	c3                   	ret    

08048582 <err_handler>:

// 异常处理，异常处理好了返回1，没有异常返回0
int err_handler(int e)
{
 8048582:	55                   	push   %ebp
 8048583:	89 e5                	mov    %esp,%ebp
 8048585:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
 8048588:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	// e最高为为1，是异常的情况
    if( e & ERROR_MARK )
 804858f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 8048593:	79 27                	jns    80485bc <err_handler+0x3a>
        switch(e ^ ERROR_MARK)
 8048595:	8b 45 08             	mov    0x8(%ebp),%eax
 8048598:	35 00 00 00 80       	xor    $0x80000000,%eax
 804859d:	3d 0a 00 07 00       	cmp    $0x7000a,%eax
 80485a2:	74 02                	je     80485a6 <err_handler+0x24>
 80485a4:	eb 1d                	jmp    80485c3 <err_handler+0x41>
        {
            // handle something unexcepted 
            case ERROR_TIMER_STATE_INVSTATE:
                printf("Reset Timer State!!!\n");
 80485a6:	c7 04 24 4a 87 04 08 	movl   $0x804874a,(%esp)
 80485ad:	e8 ae fd ff ff       	call   8048360 <puts@plt>
                ret = 1;
 80485b2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
                break;
 80485b9:	90                   	nop
 80485ba:	eb 07                	jmp    80485c3 <err_handler+0x41>
        }
    else
        ret = 1;
 80485bc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    
    // return 1 for success handling
    return ret; 
 80485c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 80485c6:	c9                   	leave  
 80485c7:	c3                   	ret    

080485c8 <demo2>:

void demo2()
{
 80485c8:	55                   	push   %ebp
 80485c9:	89 e5                	mov    %esp,%ebp
 80485cb:	83 ec 28             	sub    $0x28,%esp
    printf("demo2() begin ...\n");
 80485ce:	c7 04 24 5f 87 04 08 	movl   $0x804875f,(%esp)
 80485d5:	e8 86 fd ff ff       	call   8048360 <puts@plt>
    
    HANDLER(sub_func());
 80485da:	e8 58 ff ff ff       	call   8048537 <sub_func>
 80485df:	89 45 f4             	mov    %eax,-0xc(%ebp)
 80485e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 80485e6:	79 1a                	jns    8048602 <demo2+0x3a>
 80485e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80485eb:	89 04 24             	mov    %eax,(%esp)
 80485ee:	e8 8f ff ff ff       	call   8048582 <err_handler>
 80485f3:	85 c0                	test   %eax,%eax
 80485f5:	75 0b                	jne    8048602 <demo2+0x3a>
 80485f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80485fa:	89 04 24             	mov    %eax,(%esp)
 80485fd:	e8 7e fd ff ff       	call   8048380 <exit@plt>
    
    printf("demo2() end ...\n");
 8048602:	c7 04 24 71 87 04 08 	movl   $0x8048771,(%esp)
 8048609:	e8 52 fd ff ff       	call   8048360 <puts@plt>
}
 804860e:	c9                   	leave  
 804860f:	c3                   	ret    

08048610 <main>:

int main()
{
 8048610:	55                   	push   %ebp
 8048611:	89 e5                	mov    %esp,%ebp
 8048613:	83 e4 f0             	and    $0xfffffff0,%esp
 8048616:	83 ec 10             	sub    $0x10,%esp
    demo1();
 8048619:	e8 8f fe ff ff       	call   80484ad <demo1>
    
    printf("\n");
 804861e:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
 8048625:	e8 76 fd ff ff       	call   80483a0 <putchar@plt>
    
    demo2();
 804862a:	e8 99 ff ff ff       	call   80485c8 <demo2>
    
    return 0;
 804862f:	b8 00 00 00 00       	mov    $0x0,%eax
 8048634:	c9                   	leave  
 8048635:	c3                   	ret    
 8048636:	66 90                	xchg   %ax,%ax
 8048638:	66 90                	xchg   %ax,%ax
 804863a:	66 90                	xchg   %ax,%ax
 804863c:	66 90                	xchg   %ax,%ax
 804863e:	66 90                	xchg   %ax,%ax

08048640 <__libc_csu_init>:
 8048640:	55                   	push   %ebp
 8048641:	57                   	push   %edi
 8048642:	31 ff                	xor    %edi,%edi
 8048644:	56                   	push   %esi
 8048645:	53                   	push   %ebx
 8048646:	e8 95 fd ff ff       	call   80483e0 <__x86.get_pc_thunk.bx>
 804864b:	81 c3 b5 19 00 00    	add    $0x19b5,%ebx
 8048651:	83 ec 1c             	sub    $0x1c,%esp
 8048654:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048658:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 804865e:	e8 b1 fc ff ff       	call   8048314 <_init>
 8048663:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 8048669:	29 c6                	sub    %eax,%esi
 804866b:	c1 fe 02             	sar    $0x2,%esi
 804866e:	85 f6                	test   %esi,%esi
 8048670:	74 27                	je     8048699 <__libc_csu_init+0x59>
 8048672:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048678:	8b 44 24 38          	mov    0x38(%esp),%eax
 804867c:	89 2c 24             	mov    %ebp,(%esp)
 804867f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048683:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048687:	89 44 24 04          	mov    %eax,0x4(%esp)
 804868b:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 8048692:	83 c7 01             	add    $0x1,%edi
 8048695:	39 f7                	cmp    %esi,%edi
 8048697:	75 df                	jne    8048678 <__libc_csu_init+0x38>
 8048699:	83 c4 1c             	add    $0x1c,%esp
 804869c:	5b                   	pop    %ebx
 804869d:	5e                   	pop    %esi
 804869e:	5f                   	pop    %edi
 804869f:	5d                   	pop    %ebp
 80486a0:	c3                   	ret    
 80486a1:	eb 0d                	jmp    80486b0 <__libc_csu_fini>
 80486a3:	90                   	nop
 80486a4:	90                   	nop
 80486a5:	90                   	nop
 80486a6:	90                   	nop
 80486a7:	90                   	nop
 80486a8:	90                   	nop
 80486a9:	90                   	nop
 80486aa:	90                   	nop
 80486ab:	90                   	nop
 80486ac:	90                   	nop
 80486ad:	90                   	nop
 80486ae:	90                   	nop
 80486af:	90                   	nop

080486b0 <__libc_csu_fini>:
 80486b0:	f3 c3                	repz ret 

Disassembly of section .fini:

080486b4 <_fini>:
 80486b4:	53                   	push   %ebx
 80486b5:	83 ec 08             	sub    $0x8,%esp
 80486b8:	e8 23 fd ff ff       	call   80483e0 <__x86.get_pc_thunk.bx>
 80486bd:	81 c3 43 19 00 00    	add    $0x1943,%ebx
 80486c3:	83 c4 08             	add    $0x8,%esp
 80486c6:	5b                   	pop    %ebx
 80486c7:	c3                   	ret    
