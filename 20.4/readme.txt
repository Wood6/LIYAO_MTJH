gcc -g *.c -o main.out -lpthread


定时器模块的设计与实现：
	创建定时器后每隔指定的时间触发事件
	事件的具体表现为关联的回调函数被调用
	
代码实现，就以本代码为例说明：
	初始化定时器时单独创建一个线程作为时针源，每隔10ms更新一次st.current，若st.current == st.interval，就执行回调函数 *st.callback ,
	
但这个代码是有问题的，需要使用者遵守约定
	1、整个程序中在使用定时器时只能调用一次定时器初始化函数 TimerInitialize() 
	2、在回调函数中不能调用定时器销毁函数 DestroyTimer() 
	
与20.1对比下，添加的代码就起到防御性编程的作用，这样即使定时器使用者再不遵守上面两个约定，代码的执行结果也能够按预期运行!


-----------------------------------------------------------------------
// 正课笔记：
18 软件，设计质量之本（上）
1、软件设计是什么？
	一种创造性活动，力求以简单优雅的方式解决实际问题
		软件设计是一门技术：数据结构、组成原理、操作系统、编程语言...
	软件设计是一门艺术
		并不是技术知识的简单堆砌
		分析、抽象、取舍...

2、软件设计的特点
	软件设计是一个塑造模型（概念）的过程
	软件设计是一个取舍的过程
	软件设计是一个分而治之的过程
	软件设计是一个在理性范围内追求完美的过程
	
3、什么是软件质量？
	用户角度：缺陷defect和bug的数量越少意味着质量越好
	开发角度：
		整体架构设计易于扩展
		模块之间耦合性低，易于复用
		代码简洁易懂，易于维护
		
4、如果提高软件质量
	编码前，架构设计质量必须得到保证
	编码时，代码质量必须得到保证
	编码后，测试质量必须得到保证
	
5、为测试正名
	在需求分析结束后，测试人员就需要介入项目
		根据需求分析进行功能测试用例的设计
		根据架构设计进行模块测试用例的设计
		根据产品标准进行压力测试用例的设计
		
6、开发中常见的问题
	测试是替罪羊或救命稻草
		但凡出现bug，就是测试不给力
	资源永远不足
		现在没有时间和精力去做重构
	不改变就可以规避风险
		虽然有缺陷，但是功能不受影响，不做改变
		
7、如果提高自身的软件设计能力？
	对架构的完美性有精神上的追求，不满足功能正确
		积极思考方案，不停反思是否能够做得更好
	勇于实践与模仿，进而形成自己的风格和思想
		推敲前辈们的经典设计，尝试用于自己的项目
	总结设计原则，体会各个设计原则的内涵
		软件设计不是原则的叠加，而是一个平衡利弊的过程
		
8、小结
	软件设计（架构）的质量决定了软件产品质量的基调
	测试质量和代码质量直接决定最终产品的质量
	正规开发流程中测试人员先于编码人员介入项目
	软件架构设计能力需要通过实践提高，需要总结和体会
	
19 软件设计质量之本（中）
1、设计原则-1：以人为本
	核心：将现实世界直接映射到软件世界
	意图：便于沟通和理解，降低复杂性，增加维护性
	要点：使用现实世界中的概念
	
2、设计原则-2：简单即是美
	核心：用最简单的方法描述解决方案
	意图：便于沟通和理解，降低复杂性，增加维护性
	要点：使用团队熟悉的技术进行设计
	
3、简单性 VS 灵活性
	简单性不等于灵活性
	简单的设计易于催生灵活的设计
	过于追求灵活的设计可能导致复杂性的增加
	
4、设计原则-3：让模块善始善终
	核心：模块的初始化与模块的终止同等重要
	意图：确保模块状态的恢复和保存
	要点：对称式设计
	
5、设计原则-4：重视运行时数据的收集
	核心：考虑程序运行状态数据的收集模块
	意图：监控程序运行状态，便于调试与测试
	
6、小结
	架构设计时尽量将现实中的概念映射到程序中
	开发过程中的任意阶段都提倡简单优美的设计方式
	模块设计时需要同时考虑初始化过程与终止过程
	架构设计时需要考虑保证产品质量的辅助手段
	
20 软件设计质量之本（下）
1、设计原则-5：代码自注释
	核心：代码自身就能够很好的进行功能性说明
	意图：便于沟通和理解，增加维护性
	
2、代码质量
	最终的产品代码应该“非常容易”读懂
	注释作为补充说明必不可少，但不是越多越好（注释应该起到画龙点睛的作用，用于简要的描述代码意图；避免使用注释描述程序的运行流程）
	
3、设计原则-6：通过机制解决问题
	核心：考虑当前设计是否存在“漏洞”
	意图：杜绝类似问题的再次发生
	
4、架构经验
	设计不是一次性完成的，需要根据实际问题进行重构

5、设计原则-7：防御性程序设计
	核心：防止他人的“意外”错误
	意图：提高代码鲁棒性
	
6、小结
	尽量使用代码自注释的方式编写代码，便于沟通维护
	注释作为补充说明必不可少，但不是越多越好
	思考bug是否因为设计不当造成，通过机制解决问题
	通过防御性程序设计提高代码鲁棒性
	