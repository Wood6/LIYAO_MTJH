
main.out:     file format elf32-i386


Disassembly of section .init:

080482d4 <_init>:
 80482d4:	53                   	push   %ebx
 80482d5:	83 ec 08             	sub    $0x8,%esp
 80482d8:	e8 a3 00 00 00       	call   8048380 <__x86.get_pc_thunk.bx>
 80482dd:	81 c3 23 2d 00 00    	add    $0x2d23,%ebx
 80482e3:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 80482e9:	85 c0                	test   %eax,%eax
 80482eb:	74 05                	je     80482f2 <_init+0x1e>
 80482ed:	e8 2e 00 00 00       	call   8048320 <__gmon_start__@plt>
 80482f2:	83 c4 08             	add    $0x8,%esp
 80482f5:	5b                   	pop    %ebx
 80482f6:	c3                   	ret    

Disassembly of section .plt:

08048300 <puts@plt-0x10>:
 8048300:	ff 35 04 b0 04 08    	pushl  0x804b004
 8048306:	ff 25 08 b0 04 08    	jmp    *0x804b008
 804830c:	00 00                	add    %al,(%eax)
	...

08048310 <puts@plt>:
 8048310:	ff 25 0c b0 04 08    	jmp    *0x804b00c
 8048316:	68 00 00 00 00       	push   $0x0
 804831b:	e9 e0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048320 <__gmon_start__@plt>:
 8048320:	ff 25 10 b0 04 08    	jmp    *0x804b010
 8048326:	68 08 00 00 00       	push   $0x8
 804832b:	e9 d0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048330 <vprintf@plt>:
 8048330:	ff 25 14 b0 04 08    	jmp    *0x804b014
 8048336:	68 10 00 00 00       	push   $0x10
 804833b:	e9 c0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048340 <__libc_start_main@plt>:
 8048340:	ff 25 18 b0 04 08    	jmp    *0x804b018
 8048346:	68 18 00 00 00       	push   $0x18
 804834b:	e9 b0 ff ff ff       	jmp    8048300 <_init+0x2c>

Disassembly of section .text:

08048350 <_start>:
 8048350:	31 ed                	xor    %ebp,%ebp
 8048352:	5e                   	pop    %esi
 8048353:	89 e1                	mov    %esp,%ecx
 8048355:	83 e4 f0             	and    $0xfffffff0,%esp
 8048358:	50                   	push   %eax
 8048359:	54                   	push   %esp
 804835a:	52                   	push   %edx
 804835b:	68 c0 8f 04 08       	push   $0x8048fc0
 8048360:	68 50 8f 04 08       	push   $0x8048f50
 8048365:	51                   	push   %ecx
 8048366:	56                   	push   %esi
 8048367:	68 60 8b 04 08       	push   $0x8048b60
 804836c:	e8 cf ff ff ff       	call   8048340 <__libc_start_main@plt>
 8048371:	f4                   	hlt    
 8048372:	66 90                	xchg   %ax,%ax
 8048374:	66 90                	xchg   %ax,%ax
 8048376:	66 90                	xchg   %ax,%ax
 8048378:	66 90                	xchg   %ax,%ax
 804837a:	66 90                	xchg   %ax,%ax
 804837c:	66 90                	xchg   %ax,%ax
 804837e:	66 90                	xchg   %ax,%ax

08048380 <__x86.get_pc_thunk.bx>:
 8048380:	8b 1c 24             	mov    (%esp),%ebx
 8048383:	c3                   	ret    
 8048384:	66 90                	xchg   %ax,%ax
 8048386:	66 90                	xchg   %ax,%ax
 8048388:	66 90                	xchg   %ax,%ax
 804838a:	66 90                	xchg   %ax,%ax
 804838c:	66 90                	xchg   %ax,%ax
 804838e:	66 90                	xchg   %ax,%ax

08048390 <deregister_tm_clones>:
 8048390:	b8 27 b0 04 08       	mov    $0x804b027,%eax
 8048395:	2d 24 b0 04 08       	sub    $0x804b024,%eax
 804839a:	83 f8 06             	cmp    $0x6,%eax
 804839d:	77 01                	ja     80483a0 <deregister_tm_clones+0x10>
 804839f:	c3                   	ret    
 80483a0:	b8 00 00 00 00       	mov    $0x0,%eax
 80483a5:	85 c0                	test   %eax,%eax
 80483a7:	74 f6                	je     804839f <deregister_tm_clones+0xf>
 80483a9:	55                   	push   %ebp
 80483aa:	89 e5                	mov    %esp,%ebp
 80483ac:	83 ec 18             	sub    $0x18,%esp
 80483af:	c7 04 24 24 b0 04 08 	movl   $0x804b024,(%esp)
 80483b6:	ff d0                	call   *%eax
 80483b8:	c9                   	leave  
 80483b9:	c3                   	ret    
 80483ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080483c0 <register_tm_clones>:
 80483c0:	b8 24 b0 04 08       	mov    $0x804b024,%eax
 80483c5:	2d 24 b0 04 08       	sub    $0x804b024,%eax
 80483ca:	c1 f8 02             	sar    $0x2,%eax
 80483cd:	89 c2                	mov    %eax,%edx
 80483cf:	c1 ea 1f             	shr    $0x1f,%edx
 80483d2:	01 d0                	add    %edx,%eax
 80483d4:	d1 f8                	sar    %eax
 80483d6:	75 01                	jne    80483d9 <register_tm_clones+0x19>
 80483d8:	c3                   	ret    
 80483d9:	ba 00 00 00 00       	mov    $0x0,%edx
 80483de:	85 d2                	test   %edx,%edx
 80483e0:	74 f6                	je     80483d8 <register_tm_clones+0x18>
 80483e2:	55                   	push   %ebp
 80483e3:	89 e5                	mov    %esp,%ebp
 80483e5:	83 ec 18             	sub    $0x18,%esp
 80483e8:	89 44 24 04          	mov    %eax,0x4(%esp)
 80483ec:	c7 04 24 24 b0 04 08 	movl   $0x804b024,(%esp)
 80483f3:	ff d2                	call   *%edx
 80483f5:	c9                   	leave  
 80483f6:	c3                   	ret    
 80483f7:	89 f6                	mov    %esi,%esi
 80483f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048400 <__do_global_dtors_aux>:
 8048400:	80 3d 40 b0 04 08 00 	cmpb   $0x0,0x804b040
 8048407:	75 13                	jne    804841c <__do_global_dtors_aux+0x1c>
 8048409:	55                   	push   %ebp
 804840a:	89 e5                	mov    %esp,%ebp
 804840c:	83 ec 08             	sub    $0x8,%esp
 804840f:	e8 7c ff ff ff       	call   8048390 <deregister_tm_clones>
 8048414:	c6 05 40 b0 04 08 01 	movb   $0x1,0x804b040
 804841b:	c9                   	leave  
 804841c:	f3 c3                	repz ret 
 804841e:	66 90                	xchg   %ax,%ax

08048420 <frame_dummy>:
 8048420:	a1 10 af 04 08       	mov    0x804af10,%eax
 8048425:	85 c0                	test   %eax,%eax
 8048427:	74 1f                	je     8048448 <frame_dummy+0x28>
 8048429:	b8 00 00 00 00       	mov    $0x0,%eax
 804842e:	85 c0                	test   %eax,%eax
 8048430:	74 16                	je     8048448 <frame_dummy+0x28>
 8048432:	55                   	push   %ebp
 8048433:	89 e5                	mov    %esp,%ebp
 8048435:	83 ec 18             	sub    $0x18,%esp
 8048438:	c7 04 24 10 af 04 08 	movl   $0x804af10,(%esp)
 804843f:	ff d0                	call   *%eax
 8048441:	c9                   	leave  
 8048442:	e9 79 ff ff ff       	jmp    80483c0 <register_tm_clones>
 8048447:	90                   	nop
 8048448:	e9 73 ff ff ff       	jmp    80483c0 <register_tm_clones>

0804844d <dll_init>:
#ifdef  __cplusplus
extern "C" {
#endif

static inline void dll_init (dll_t *_p_dll)
{
 804844d:	55                   	push   %ebp
 804844e:	89 e5                	mov    %esp,%ebp
    _p_dll->head_ = _p_dll->tail_ = 0;
 8048450:	8b 45 08             	mov    0x8(%ebp),%eax
 8048453:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
 804845a:	8b 45 08             	mov    0x8(%ebp),%eax
 804845d:	8b 50 04             	mov    0x4(%eax),%edx
 8048460:	8b 45 08             	mov    0x8(%ebp),%eax
 8048463:	89 10                	mov    %edx,(%eax)
    _p_dll->count_ = 0;
 8048465:	8b 45 08             	mov    0x8(%ebp),%eax
 8048468:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
 804846f:	5d                   	pop    %ebp
 8048470:	c3                   	ret    

08048471 <dll_insert_before>:
#include "dll.h"

/* DLL stands for Double-Linked List */

void dll_insert_before (dll_t *_p_dll, dll_node_t *_p_ref, dll_node_t *_p_inserted)
{
 8048471:	55                   	push   %ebp
 8048472:	89 e5                	mov    %esp,%ebp
    if (0 == _p_ref->prev_) {
 8048474:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048477:	8b 00                	mov    (%eax),%eax
 8048479:	85 c0                	test   %eax,%eax
 804847b:	75 24                	jne    80484a1 <dll_insert_before+0x30>
        _p_dll->head_ = _p_inserted;
 804847d:	8b 45 08             	mov    0x8(%ebp),%eax
 8048480:	8b 55 10             	mov    0x10(%ebp),%edx
 8048483:	89 10                	mov    %edx,(%eax)
        _p_ref->prev_ = _p_inserted;
 8048485:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048488:	8b 55 10             	mov    0x10(%ebp),%edx
 804848b:	89 10                	mov    %edx,(%eax)
        _p_inserted->next_ = _p_ref;
 804848d:	8b 45 10             	mov    0x10(%ebp),%eax
 8048490:	8b 55 0c             	mov    0xc(%ebp),%edx
 8048493:	89 50 04             	mov    %edx,0x4(%eax)
        _p_inserted->prev_ = 0;
 8048496:	8b 45 10             	mov    0x10(%ebp),%eax
 8048499:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 804849f:	eb 26                	jmp    80484c7 <dll_insert_before+0x56>
    }
    else {
        _p_ref->prev_->next_ = _p_inserted;
 80484a1:	8b 45 0c             	mov    0xc(%ebp),%eax
 80484a4:	8b 00                	mov    (%eax),%eax
 80484a6:	8b 55 10             	mov    0x10(%ebp),%edx
 80484a9:	89 50 04             	mov    %edx,0x4(%eax)
        _p_inserted->prev_ = _p_ref->prev_;
 80484ac:	8b 45 0c             	mov    0xc(%ebp),%eax
 80484af:	8b 10                	mov    (%eax),%edx
 80484b1:	8b 45 10             	mov    0x10(%ebp),%eax
 80484b4:	89 10                	mov    %edx,(%eax)
        _p_inserted->next_ = _p_ref;
 80484b6:	8b 45 10             	mov    0x10(%ebp),%eax
 80484b9:	8b 55 0c             	mov    0xc(%ebp),%edx
 80484bc:	89 50 04             	mov    %edx,0x4(%eax)
        _p_ref->prev_ = _p_inserted;
 80484bf:	8b 45 0c             	mov    0xc(%ebp),%eax
 80484c2:	8b 55 10             	mov    0x10(%ebp),%edx
 80484c5:	89 10                	mov    %edx,(%eax)
    }
    _p_dll->count_++;
 80484c7:	8b 45 08             	mov    0x8(%ebp),%eax
 80484ca:	8b 40 08             	mov    0x8(%eax),%eax
 80484cd:	8d 50 01             	lea    0x1(%eax),%edx
 80484d0:	8b 45 08             	mov    0x8(%ebp),%eax
 80484d3:	89 50 08             	mov    %edx,0x8(%eax)
}
 80484d6:	5d                   	pop    %ebp
 80484d7:	c3                   	ret    

080484d8 <dll_insert_after>:

void dll_insert_after (dll_t *_p_dll, dll_node_t *_p_ref, dll_node_t *_p_inserted)
{
 80484d8:	55                   	push   %ebp
 80484d9:	89 e5                	mov    %esp,%ebp
    if (0 == _p_ref->next_) {
 80484db:	8b 45 0c             	mov    0xc(%ebp),%eax
 80484de:	8b 40 04             	mov    0x4(%eax),%eax
 80484e1:	85 c0                	test   %eax,%eax
 80484e3:	75 26                	jne    804850b <dll_insert_after+0x33>
        _p_dll->tail_ = _p_inserted;
 80484e5:	8b 45 08             	mov    0x8(%ebp),%eax
 80484e8:	8b 55 10             	mov    0x10(%ebp),%edx
 80484eb:	89 50 04             	mov    %edx,0x4(%eax)
        _p_ref->next_ = _p_inserted;
 80484ee:	8b 45 0c             	mov    0xc(%ebp),%eax
 80484f1:	8b 55 10             	mov    0x10(%ebp),%edx
 80484f4:	89 50 04             	mov    %edx,0x4(%eax)
        _p_inserted->next_ = 0;
 80484f7:	8b 45 10             	mov    0x10(%ebp),%eax
 80484fa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        _p_inserted->prev_ = _p_ref;
 8048501:	8b 45 10             	mov    0x10(%ebp),%eax
 8048504:	8b 55 0c             	mov    0xc(%ebp),%edx
 8048507:	89 10                	mov    %edx,(%eax)
 8048509:	eb 28                	jmp    8048533 <dll_insert_after+0x5b>
    }
    else {
        _p_ref->next_->prev_ = _p_inserted;
 804850b:	8b 45 0c             	mov    0xc(%ebp),%eax
 804850e:	8b 40 04             	mov    0x4(%eax),%eax
 8048511:	8b 55 10             	mov    0x10(%ebp),%edx
 8048514:	89 10                	mov    %edx,(%eax)
        _p_inserted->prev_ = _p_ref;
 8048516:	8b 45 10             	mov    0x10(%ebp),%eax
 8048519:	8b 55 0c             	mov    0xc(%ebp),%edx
 804851c:	89 10                	mov    %edx,(%eax)
        _p_inserted->next_ = _p_ref->next_;
 804851e:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048521:	8b 50 04             	mov    0x4(%eax),%edx
 8048524:	8b 45 10             	mov    0x10(%ebp),%eax
 8048527:	89 50 04             	mov    %edx,0x4(%eax)
        _p_ref->next_ = _p_inserted;
 804852a:	8b 45 0c             	mov    0xc(%ebp),%eax
 804852d:	8b 55 10             	mov    0x10(%ebp),%edx
 8048530:	89 50 04             	mov    %edx,0x4(%eax)
        
    }
    _p_dll->count_++;
 8048533:	8b 45 08             	mov    0x8(%ebp),%eax
 8048536:	8b 40 08             	mov    0x8(%eax),%eax
 8048539:	8d 50 01             	lea    0x1(%eax),%edx
 804853c:	8b 45 08             	mov    0x8(%ebp),%eax
 804853f:	89 50 08             	mov    %edx,0x8(%eax)
}
 8048542:	5d                   	pop    %ebp
 8048543:	c3                   	ret    

08048544 <dll_push_head>:

void dll_push_head (dll_t *_p_dll, dll_node_t *_p_node)
{
 8048544:	55                   	push   %ebp
 8048545:	89 e5                	mov    %esp,%ebp
    if (0 == _p_dll->head_) {
 8048547:	8b 45 08             	mov    0x8(%ebp),%eax
 804854a:	8b 00                	mov    (%eax),%eax
 804854c:	85 c0                	test   %eax,%eax
 804854e:	75 2a                	jne    804857a <dll_push_head+0x36>
        _p_dll->head_ = _p_dll->tail_ = _p_node;
 8048550:	8b 45 08             	mov    0x8(%ebp),%eax
 8048553:	8b 55 0c             	mov    0xc(%ebp),%edx
 8048556:	89 50 04             	mov    %edx,0x4(%eax)
 8048559:	8b 45 08             	mov    0x8(%ebp),%eax
 804855c:	8b 50 04             	mov    0x4(%eax),%edx
 804855f:	8b 45 08             	mov    0x8(%ebp),%eax
 8048562:	89 10                	mov    %edx,(%eax)
        _p_node->next_ = _p_node->prev_ = 0;
 8048564:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048567:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 804856d:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048570:	8b 10                	mov    (%eax),%edx
 8048572:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048575:	89 50 04             	mov    %edx,0x4(%eax)
 8048578:	eb 26                	jmp    80485a0 <dll_push_head+0x5c>
    }
    else {
        _p_node->next_ = _p_dll->head_;
 804857a:	8b 45 08             	mov    0x8(%ebp),%eax
 804857d:	8b 10                	mov    (%eax),%edx
 804857f:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048582:	89 50 04             	mov    %edx,0x4(%eax)
        _p_node->prev_ = 0;
 8048585:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048588:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        _p_dll->head_->prev_ = _p_node;
 804858e:	8b 45 08             	mov    0x8(%ebp),%eax
 8048591:	8b 00                	mov    (%eax),%eax
 8048593:	8b 55 0c             	mov    0xc(%ebp),%edx
 8048596:	89 10                	mov    %edx,(%eax)
        _p_dll->head_ = _p_node;
 8048598:	8b 45 08             	mov    0x8(%ebp),%eax
 804859b:	8b 55 0c             	mov    0xc(%ebp),%edx
 804859e:	89 10                	mov    %edx,(%eax)
    }

    _p_dll->count_ ++;
 80485a0:	8b 45 08             	mov    0x8(%ebp),%eax
 80485a3:	8b 40 08             	mov    0x8(%eax),%eax
 80485a6:	8d 50 01             	lea    0x1(%eax),%edx
 80485a9:	8b 45 08             	mov    0x8(%ebp),%eax
 80485ac:	89 50 08             	mov    %edx,0x8(%eax)
}
 80485af:	5d                   	pop    %ebp
 80485b0:	c3                   	ret    

080485b1 <dll_push_tail>:

void dll_push_tail (dll_t *_p_dll, dll_node_t *_p_node)
{
 80485b1:	55                   	push   %ebp
 80485b2:	89 e5                	mov    %esp,%ebp
 80485b4:	83 ec 10             	sub    $0x10,%esp
    if (0 == _p_dll->tail_) {
 80485b7:	8b 45 08             	mov    0x8(%ebp),%eax
 80485ba:	8b 40 04             	mov    0x4(%eax),%eax
 80485bd:	85 c0                	test   %eax,%eax
 80485bf:	75 2a                	jne    80485eb <dll_push_tail+0x3a>
        _p_dll->head_ = _p_dll->tail_ = _p_node;
 80485c1:	8b 45 08             	mov    0x8(%ebp),%eax
 80485c4:	8b 55 0c             	mov    0xc(%ebp),%edx
 80485c7:	89 50 04             	mov    %edx,0x4(%eax)
 80485ca:	8b 45 08             	mov    0x8(%ebp),%eax
 80485cd:	8b 50 04             	mov    0x4(%eax),%edx
 80485d0:	8b 45 08             	mov    0x8(%ebp),%eax
 80485d3:	89 10                	mov    %edx,(%eax)
        _p_node->next_ = _p_node->prev_ = 0;
 80485d5:	8b 45 0c             	mov    0xc(%ebp),%eax
 80485d8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 80485de:	8b 45 0c             	mov    0xc(%ebp),%eax
 80485e1:	8b 10                	mov    (%eax),%edx
 80485e3:	8b 45 0c             	mov    0xc(%ebp),%eax
 80485e6:	89 50 04             	mov    %edx,0x4(%eax)
 80485e9:	eb 2d                	jmp    8048618 <dll_push_tail+0x67>
    }
    else {
        dll_node_t *p_tail = _p_dll->tail_;
 80485eb:	8b 45 08             	mov    0x8(%ebp),%eax
 80485ee:	8b 40 04             	mov    0x4(%eax),%eax
 80485f1:	89 45 fc             	mov    %eax,-0x4(%ebp)
        
        p_tail->next_ = _p_node;
 80485f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
 80485f7:	8b 55 0c             	mov    0xc(%ebp),%edx
 80485fa:	89 50 04             	mov    %edx,0x4(%eax)
        _p_node->prev_ = p_tail;
 80485fd:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048600:	8b 55 fc             	mov    -0x4(%ebp),%edx
 8048603:	89 10                	mov    %edx,(%eax)
        _p_node->next_ = 0;
 8048605:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048608:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        _p_dll->tail_ = _p_node;
 804860f:	8b 45 08             	mov    0x8(%ebp),%eax
 8048612:	8b 55 0c             	mov    0xc(%ebp),%edx
 8048615:	89 50 04             	mov    %edx,0x4(%eax)
    }

    _p_dll->count_ ++;
 8048618:	8b 45 08             	mov    0x8(%ebp),%eax
 804861b:	8b 40 08             	mov    0x8(%eax),%eax
 804861e:	8d 50 01             	lea    0x1(%eax),%edx
 8048621:	8b 45 08             	mov    0x8(%ebp),%eax
 8048624:	89 50 08             	mov    %edx,0x8(%eax)
}
 8048627:	c9                   	leave  
 8048628:	c3                   	ret    

08048629 <dll_pop_head>:

dll_node_t *dll_pop_head (dll_t *_p_dll)
{
 8048629:	55                   	push   %ebp
 804862a:	89 e5                	mov    %esp,%ebp
 804862c:	83 ec 10             	sub    $0x10,%esp
    dll_node_t *p_node = _p_dll->head_;
 804862f:	8b 45 08             	mov    0x8(%ebp),%eax
 8048632:	8b 00                	mov    (%eax),%eax
 8048634:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (p_node != 0) {
 8048637:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
 804863b:	74 4e                	je     804868b <dll_pop_head+0x62>
        _p_dll->count_--;
 804863d:	8b 45 08             	mov    0x8(%ebp),%eax
 8048640:	8b 40 08             	mov    0x8(%eax),%eax
 8048643:	8d 50 ff             	lea    -0x1(%eax),%edx
 8048646:	8b 45 08             	mov    0x8(%ebp),%eax
 8048649:	89 50 08             	mov    %edx,0x8(%eax)
        _p_dll->head_ = p_node->next_;
 804864c:	8b 45 fc             	mov    -0x4(%ebp),%eax
 804864f:	8b 50 04             	mov    0x4(%eax),%edx
 8048652:	8b 45 08             	mov    0x8(%ebp),%eax
 8048655:	89 10                	mov    %edx,(%eax)
        if (0 == _p_dll->head_) {
 8048657:	8b 45 08             	mov    0x8(%ebp),%eax
 804865a:	8b 00                	mov    (%eax),%eax
 804865c:	85 c0                	test   %eax,%eax
 804865e:	75 0c                	jne    804866c <dll_pop_head+0x43>
            _p_dll->tail_ = 0;
 8048660:	8b 45 08             	mov    0x8(%ebp),%eax
 8048663:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
 804866a:	eb 0c                	jmp    8048678 <dll_pop_head+0x4f>
        }
        else {
            p_node->next_->prev_ = 0;
 804866c:	8b 45 fc             	mov    -0x4(%ebp),%eax
 804866f:	8b 40 04             	mov    0x4(%eax),%eax
 8048672:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        p_node->next_ = 0;
 8048678:	8b 45 fc             	mov    -0x4(%ebp),%eax
 804867b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        p_node->prev_ = 0;
 8048682:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8048685:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }
    
    return p_node;
 804868b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
 804868e:	c9                   	leave  
 804868f:	c3                   	ret    

08048690 <dll_pop_tail>:

dll_node_t *dll_pop_tail (dll_t *_p_dll)
{
 8048690:	55                   	push   %ebp
 8048691:	89 e5                	mov    %esp,%ebp
 8048693:	83 ec 10             	sub    $0x10,%esp
    dll_node_t *p_node = _p_dll->tail_;
 8048696:	8b 45 08             	mov    0x8(%ebp),%eax
 8048699:	8b 40 04             	mov    0x4(%eax),%eax
 804869c:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (p_node != 0) {
 804869f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
 80486a3:	74 4e                	je     80486f3 <dll_pop_tail+0x63>
        _p_dll->count_ --;
 80486a5:	8b 45 08             	mov    0x8(%ebp),%eax
 80486a8:	8b 40 08             	mov    0x8(%eax),%eax
 80486ab:	8d 50 ff             	lea    -0x1(%eax),%edx
 80486ae:	8b 45 08             	mov    0x8(%ebp),%eax
 80486b1:	89 50 08             	mov    %edx,0x8(%eax)
        _p_dll->tail_ = p_node->prev_;
 80486b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
 80486b7:	8b 10                	mov    (%eax),%edx
 80486b9:	8b 45 08             	mov    0x8(%ebp),%eax
 80486bc:	89 50 04             	mov    %edx,0x4(%eax)
        if (0 == _p_dll->tail_) {
 80486bf:	8b 45 08             	mov    0x8(%ebp),%eax
 80486c2:	8b 40 04             	mov    0x4(%eax),%eax
 80486c5:	85 c0                	test   %eax,%eax
 80486c7:	75 0b                	jne    80486d4 <dll_pop_tail+0x44>
            _p_dll->head_ = 0;
 80486c9:	8b 45 08             	mov    0x8(%ebp),%eax
 80486cc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 80486d2:	eb 0c                	jmp    80486e0 <dll_pop_tail+0x50>
        }
        else {
            p_node->prev_->next_ = 0;
 80486d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
 80486d7:	8b 00                	mov    (%eax),%eax
 80486d9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        }
        p_node->next_ = 0;
 80486e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
 80486e3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        p_node->prev_ = 0;
 80486ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
 80486ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }
    
    return p_node;
 80486f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
 80486f6:	c9                   	leave  
 80486f7:	c3                   	ret    

080486f8 <dll_remove>:

void dll_remove (dll_t *_p_dll, const dll_node_t *_p_node)
{
 80486f8:	55                   	push   %ebp
 80486f9:	89 e5                	mov    %esp,%ebp
    if (0 == _p_node->prev_) {
 80486fb:	8b 45 0c             	mov    0xc(%ebp),%eax
 80486fe:	8b 00                	mov    (%eax),%eax
 8048700:	85 c0                	test   %eax,%eax
 8048702:	75 0d                	jne    8048711 <dll_remove+0x19>
        _p_dll->head_ = _p_node->next_;
 8048704:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048707:	8b 50 04             	mov    0x4(%eax),%edx
 804870a:	8b 45 08             	mov    0x8(%ebp),%eax
 804870d:	89 10                	mov    %edx,(%eax)
 804870f:	eb 0e                	jmp    804871f <dll_remove+0x27>
    }
    else {
        _p_node->prev_->next_ = _p_node->next_;
 8048711:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048714:	8b 00                	mov    (%eax),%eax
 8048716:	8b 55 0c             	mov    0xc(%ebp),%edx
 8048719:	8b 52 04             	mov    0x4(%edx),%edx
 804871c:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (0 == _p_node->next_) {
 804871f:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048722:	8b 40 04             	mov    0x4(%eax),%eax
 8048725:	85 c0                	test   %eax,%eax
 8048727:	75 0d                	jne    8048736 <dll_remove+0x3e>
        _p_dll->tail_ = _p_node->prev_;
 8048729:	8b 45 0c             	mov    0xc(%ebp),%eax
 804872c:	8b 10                	mov    (%eax),%edx
 804872e:	8b 45 08             	mov    0x8(%ebp),%eax
 8048731:	89 50 04             	mov    %edx,0x4(%eax)
 8048734:	eb 0d                	jmp    8048743 <dll_remove+0x4b>
    }
    else {
        _p_node->next_->prev_ = _p_node->prev_;
 8048736:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048739:	8b 40 04             	mov    0x4(%eax),%eax
 804873c:	8b 55 0c             	mov    0xc(%ebp),%edx
 804873f:	8b 12                	mov    (%edx),%edx
 8048741:	89 10                	mov    %edx,(%eax)
    }

    _p_dll->count_--;
 8048743:	8b 45 08             	mov    0x8(%ebp),%eax
 8048746:	8b 40 08             	mov    0x8(%eax),%eax
 8048749:	8d 50 ff             	lea    -0x1(%eax),%edx
 804874c:	8b 45 08             	mov    0x8(%ebp),%eax
 804874f:	89 50 08             	mov    %edx,0x8(%eax)
}
 8048752:	5d                   	pop    %ebp
 8048753:	c3                   	ret    

08048754 <dll_traverse>:

dll_node_t *dll_traverse (dll_t *_p_dll, traverse_callback_t _cb, void *_p_arg)
{
 8048754:	55                   	push   %ebp
 8048755:	89 e5                	mov    %esp,%ebp
 8048757:	53                   	push   %ebx
 8048758:	83 ec 14             	sub    $0x14,%esp
    register dll_node_t *p_node = _p_dll->head_;
 804875b:	8b 45 08             	mov    0x8(%ebp),%eax
 804875e:	8b 18                	mov    (%eax),%ebx

    if (null == _cb) {
 8048760:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
 8048764:	75 07                	jne    804876d <dll_traverse+0x19>
        return 0;
 8048766:	b8 00 00 00 00       	mov    $0x0,%eax
 804876b:	eb 25                	jmp    8048792 <dll_traverse+0x3e>
    }
    
    while ((0 != p_node) && ((*_cb) (_p_dll, p_node, _p_arg))) {
 804876d:	eb 03                	jmp    8048772 <dll_traverse+0x1e>
        p_node = p_node->next_;
 804876f:	8b 5b 04             	mov    0x4(%ebx),%ebx

    if (null == _cb) {
        return 0;
    }
    
    while ((0 != p_node) && ((*_cb) (_p_dll, p_node, _p_arg))) {
 8048772:	85 db                	test   %ebx,%ebx
 8048774:	74 1a                	je     8048790 <dll_traverse+0x3c>
 8048776:	8b 45 10             	mov    0x10(%ebp),%eax
 8048779:	89 44 24 08          	mov    %eax,0x8(%esp)
 804877d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 8048781:	8b 45 08             	mov    0x8(%ebp),%eax
 8048784:	89 04 24             	mov    %eax,(%esp)
 8048787:	8b 45 0c             	mov    0xc(%ebp),%eax
 804878a:	ff d0                	call   *%eax
 804878c:	85 c0                	test   %eax,%eax
 804878e:	75 df                	jne    804876f <dll_traverse+0x1b>
        p_node = p_node->next_;
    }

    return p_node;
 8048790:	89 d8                	mov    %ebx,%eax
}
 8048792:	83 c4 14             	add    $0x14,%esp
 8048795:	5b                   	pop    %ebx
 8048796:	5d                   	pop    %ebp
 8048797:	c3                   	ret    

08048798 <dll_traverse_reversely>:

dll_node_t *dll_traverse_reversely (dll_t *_p_dll, traverse_callback_t _cb, 
    void *_p_arg)
{
 8048798:	55                   	push   %ebp
 8048799:	89 e5                	mov    %esp,%ebp
 804879b:	53                   	push   %ebx
 804879c:	83 ec 14             	sub    $0x14,%esp
    register dll_node_t *p_node = _p_dll->tail_;
 804879f:	8b 45 08             	mov    0x8(%ebp),%eax
 80487a2:	8b 58 04             	mov    0x4(%eax),%ebx

    if (null == _cb) {
 80487a5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
 80487a9:	75 07                	jne    80487b2 <dll_traverse_reversely+0x1a>
        return 0;
 80487ab:	b8 00 00 00 00       	mov    $0x0,%eax
 80487b0:	eb 24                	jmp    80487d6 <dll_traverse_reversely+0x3e>
    }
    
    while ((0 != p_node) && ((*_cb) (_p_dll, p_node, _p_arg))) {
 80487b2:	eb 02                	jmp    80487b6 <dll_traverse_reversely+0x1e>
        p_node = p_node->prev_;
 80487b4:	8b 1b                	mov    (%ebx),%ebx

    if (null == _cb) {
        return 0;
    }
    
    while ((0 != p_node) && ((*_cb) (_p_dll, p_node, _p_arg))) {
 80487b6:	85 db                	test   %ebx,%ebx
 80487b8:	74 1a                	je     80487d4 <dll_traverse_reversely+0x3c>
 80487ba:	8b 45 10             	mov    0x10(%ebp),%eax
 80487bd:	89 44 24 08          	mov    %eax,0x8(%esp)
 80487c1:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 80487c5:	8b 45 08             	mov    0x8(%ebp),%eax
 80487c8:	89 04 24             	mov    %eax,(%esp)
 80487cb:	8b 45 0c             	mov    0xc(%ebp),%eax
 80487ce:	ff d0                	call   *%eax
 80487d0:	85 c0                	test   %eax,%eax
 80487d2:	75 e0                	jne    80487b4 <dll_traverse_reversely+0x1c>
        p_node = p_node->prev_;
    }

    return p_node;
 80487d4:	89 d8                	mov    %ebx,%eax
}
 80487d6:	83 c4 14             	add    $0x14,%esp
 80487d9:	5b                   	pop    %ebx
 80487da:	5d                   	pop    %ebp
 80487db:	c3                   	ret    

080487dc <dll_merge>:

void dll_merge (dll_t *_p_to, dll_t *_p_from)
{
 80487dc:	55                   	push   %ebp
 80487dd:	89 e5                	mov    %esp,%ebp
 80487df:	83 ec 04             	sub    $0x4,%esp
    if (0 == _p_to->count_) {
 80487e2:	8b 45 08             	mov    0x8(%ebp),%eax
 80487e5:	8b 40 08             	mov    0x8(%eax),%eax
 80487e8:	85 c0                	test   %eax,%eax
 80487ea:	75 18                	jne    8048804 <dll_merge+0x28>
        *_p_to = *_p_from;
 80487ec:	8b 45 08             	mov    0x8(%ebp),%eax
 80487ef:	8b 55 0c             	mov    0xc(%ebp),%edx
 80487f2:	8b 0a                	mov    (%edx),%ecx
 80487f4:	89 08                	mov    %ecx,(%eax)
 80487f6:	8b 4a 04             	mov    0x4(%edx),%ecx
 80487f9:	89 48 04             	mov    %ecx,0x4(%eax)
 80487fc:	8b 52 08             	mov    0x8(%edx),%edx
 80487ff:	89 50 08             	mov    %edx,0x8(%eax)
 8048802:	eb 45                	jmp    8048849 <dll_merge+0x6d>
    }
    else if (0 != _p_from->count_) {
 8048804:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048807:	8b 40 08             	mov    0x8(%eax),%eax
 804880a:	85 c0                	test   %eax,%eax
 804880c:	74 3b                	je     8048849 <dll_merge+0x6d>
        _p_from->head_->prev_ = _p_to->tail_;
 804880e:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048811:	8b 00                	mov    (%eax),%eax
 8048813:	8b 55 08             	mov    0x8(%ebp),%edx
 8048816:	8b 52 04             	mov    0x4(%edx),%edx
 8048819:	89 10                	mov    %edx,(%eax)
        _p_to->tail_->next_ = _p_from->head_;
 804881b:	8b 45 08             	mov    0x8(%ebp),%eax
 804881e:	8b 40 04             	mov    0x4(%eax),%eax
 8048821:	8b 55 0c             	mov    0xc(%ebp),%edx
 8048824:	8b 12                	mov    (%edx),%edx
 8048826:	89 50 04             	mov    %edx,0x4(%eax)
        _p_to->tail_ = _p_from->tail_;
 8048829:	8b 45 0c             	mov    0xc(%ebp),%eax
 804882c:	8b 50 04             	mov    0x4(%eax),%edx
 804882f:	8b 45 08             	mov    0x8(%ebp),%eax
 8048832:	89 50 04             	mov    %edx,0x4(%eax)
        _p_to->count_ += _p_from->count_;
 8048835:	8b 45 08             	mov    0x8(%ebp),%eax
 8048838:	8b 50 08             	mov    0x8(%eax),%edx
 804883b:	8b 45 0c             	mov    0xc(%ebp),%eax
 804883e:	8b 40 08             	mov    0x8(%eax),%eax
 8048841:	01 c2                	add    %eax,%edx
 8048843:	8b 45 08             	mov    0x8(%ebp),%eax
 8048846:	89 50 08             	mov    %edx,0x8(%eax)
    }
    dll_init (_p_from);
 8048849:	8b 45 0c             	mov    0xc(%ebp),%eax
 804884c:	89 04 24             	mov    %eax,(%esp)
 804884f:	e8 f9 fb ff ff       	call   804844d <dll_init>
}
 8048854:	c9                   	leave  
 8048855:	c3                   	ret    

08048856 <dll_split>:

void dll_split (dll_t *_p_orig, dll_t *_p_derived, dll_node_t *_p_breakpoint, 
    bool _breakpoint_belongs_to_orig)
{
 8048856:	55                   	push   %ebp
 8048857:	89 e5                	mov    %esp,%ebp
 8048859:	83 ec 14             	sub    $0x14,%esp
    dll_node_t *p_node;
    
    if (_breakpoint_belongs_to_orig) {
 804885c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
 8048860:	74 5c                	je     80488be <dll_split+0x68>
        if (0 == _p_breakpoint->next_) {
 8048862:	8b 45 10             	mov    0x10(%ebp),%eax
 8048865:	8b 40 04             	mov    0x4(%eax),%eax
 8048868:	85 c0                	test   %eax,%eax
 804886a:	75 10                	jne    804887c <dll_split+0x26>
            dll_init (_p_derived);
 804886c:	8b 45 0c             	mov    0xc(%ebp),%eax
 804886f:	89 04 24             	mov    %eax,(%esp)
 8048872:	e8 d6 fb ff ff       	call   804844d <dll_init>
            return;
 8048877:	e9 f5 00 00 00       	jmp    8048971 <dll_split+0x11b>
        }
        *_p_derived = *_p_orig;
 804887c:	8b 45 0c             	mov    0xc(%ebp),%eax
 804887f:	8b 55 08             	mov    0x8(%ebp),%edx
 8048882:	8b 0a                	mov    (%edx),%ecx
 8048884:	89 08                	mov    %ecx,(%eax)
 8048886:	8b 4a 04             	mov    0x4(%edx),%ecx
 8048889:	89 48 04             	mov    %ecx,0x4(%eax)
 804888c:	8b 52 08             	mov    0x8(%edx),%edx
 804888f:	89 50 08             	mov    %edx,0x8(%eax)
        _p_orig->tail_ = _p_breakpoint;
 8048892:	8b 45 08             	mov    0x8(%ebp),%eax
 8048895:	8b 55 10             	mov    0x10(%ebp),%edx
 8048898:	89 50 04             	mov    %edx,0x4(%eax)
        _p_derived->head_ = _p_breakpoint->next_;
 804889b:	8b 45 10             	mov    0x10(%ebp),%eax
 804889e:	8b 50 04             	mov    0x4(%eax),%edx
 80488a1:	8b 45 0c             	mov    0xc(%ebp),%eax
 80488a4:	89 10                	mov    %edx,(%eax)
        _p_breakpoint->next_->prev_ = 0;
 80488a6:	8b 45 10             	mov    0x10(%ebp),%eax
 80488a9:	8b 40 04             	mov    0x4(%eax),%eax
 80488ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        _p_breakpoint->next_ = 0;
 80488b2:	8b 45 10             	mov    0x10(%ebp),%eax
 80488b5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
 80488bc:	eb 6d                	jmp    804892b <dll_split+0xd5>
    }
    else {
        if (0 == _p_breakpoint->prev_) {
 80488be:	8b 45 10             	mov    0x10(%ebp),%eax
 80488c1:	8b 00                	mov    (%eax),%eax
 80488c3:	85 c0                	test   %eax,%eax
 80488c5:	75 26                	jne    80488ed <dll_split+0x97>
            *_p_derived = *_p_orig;
 80488c7:	8b 45 0c             	mov    0xc(%ebp),%eax
 80488ca:	8b 55 08             	mov    0x8(%ebp),%edx
 80488cd:	8b 0a                	mov    (%edx),%ecx
 80488cf:	89 08                	mov    %ecx,(%eax)
 80488d1:	8b 4a 04             	mov    0x4(%edx),%ecx
 80488d4:	89 48 04             	mov    %ecx,0x4(%eax)
 80488d7:	8b 52 08             	mov    0x8(%edx),%edx
 80488da:	89 50 08             	mov    %edx,0x8(%eax)
            dll_init (_p_orig);
 80488dd:	8b 45 08             	mov    0x8(%ebp),%eax
 80488e0:	89 04 24             	mov    %eax,(%esp)
 80488e3:	e8 65 fb ff ff       	call   804844d <dll_init>
            return;
 80488e8:	e9 84 00 00 00       	jmp    8048971 <dll_split+0x11b>
        }
        *_p_derived = *_p_orig;
 80488ed:	8b 45 0c             	mov    0xc(%ebp),%eax
 80488f0:	8b 55 08             	mov    0x8(%ebp),%edx
 80488f3:	8b 0a                	mov    (%edx),%ecx
 80488f5:	89 08                	mov    %ecx,(%eax)
 80488f7:	8b 4a 04             	mov    0x4(%edx),%ecx
 80488fa:	89 48 04             	mov    %ecx,0x4(%eax)
 80488fd:	8b 52 08             	mov    0x8(%edx),%edx
 8048900:	89 50 08             	mov    %edx,0x8(%eax)
        _p_orig->tail_ = _p_breakpoint->prev_;
 8048903:	8b 45 10             	mov    0x10(%ebp),%eax
 8048906:	8b 10                	mov    (%eax),%edx
 8048908:	8b 45 08             	mov    0x8(%ebp),%eax
 804890b:	89 50 04             	mov    %edx,0x4(%eax)
        _p_derived->head_ = _p_breakpoint;
 804890e:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048911:	8b 55 10             	mov    0x10(%ebp),%edx
 8048914:	89 10                	mov    %edx,(%eax)
        _p_breakpoint->prev_->next_ = 0;
 8048916:	8b 45 10             	mov    0x10(%ebp),%eax
 8048919:	8b 00                	mov    (%eax),%eax
 804891b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        _p_breakpoint->prev_ = 0;
 8048922:	8b 45 10             	mov    0x10(%ebp),%eax
 8048925:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    _p_orig->count_ = 0;
 804892b:	8b 45 08             	mov    0x8(%ebp),%eax
 804892e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    p_node = _p_orig->head_;
 8048935:	8b 45 08             	mov    0x8(%ebp),%eax
 8048938:	8b 00                	mov    (%eax),%eax
 804893a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (p_node != 0) {
 804893d:	eb 18                	jmp    8048957 <dll_split+0x101>
        _p_orig->count_ ++;
 804893f:	8b 45 08             	mov    0x8(%ebp),%eax
 8048942:	8b 40 08             	mov    0x8(%eax),%eax
 8048945:	8d 50 01             	lea    0x1(%eax),%edx
 8048948:	8b 45 08             	mov    0x8(%ebp),%eax
 804894b:	89 50 08             	mov    %edx,0x8(%eax)
        p_node = p_node->next_;
 804894e:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8048951:	8b 40 04             	mov    0x4(%eax),%eax
 8048954:	89 45 fc             	mov    %eax,-0x4(%ebp)
        _p_breakpoint->prev_ = 0;
    }

    _p_orig->count_ = 0;
    p_node = _p_orig->head_;
    while (p_node != 0) {
 8048957:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
 804895b:	75 e2                	jne    804893f <dll_split+0xe9>
        _p_orig->count_ ++;
        p_node = p_node->next_;
    }

    _p_derived->count_ -= _p_orig->count_;
 804895d:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048960:	8b 50 08             	mov    0x8(%eax),%edx
 8048963:	8b 45 08             	mov    0x8(%ebp),%eax
 8048966:	8b 40 08             	mov    0x8(%eax),%eax
 8048969:	29 c2                	sub    %eax,%edx
 804896b:	8b 45 0c             	mov    0xc(%ebp),%eax
 804896e:	89 50 08             	mov    %edx,0x8(%eax)
}
 8048971:	c9                   	leave  
 8048972:	c3                   	ret    

08048973 <errstr>:
} g_errstr_array [MODULE_COUNT];

// #include "errstr.def"

const char *errstr (error_t _error)
{
 8048973:	55                   	push   %ebp
 8048974:	89 e5                	mov    %esp,%ebp
 8048976:	83 ec 10             	sub    $0x10,%esp
    static bool initialized = false;
    module_t module_id = MODULE_ID (_error);
 8048979:	8b 45 08             	mov    0x8(%ebp),%eax
 804897c:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
 8048981:	c1 f8 10             	sar    $0x10,%eax
 8048984:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int error_id = MODULE_ERROR (_error);
 8048987:	8b 45 08             	mov    0x8(%ebp),%eax
 804898a:	0f b7 c0             	movzwl %ax,%eax
 804898d:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (0 == initialized) {
 8048990:	a1 20 b1 04 08       	mov    0x804b120,%eax
 8048995:	85 c0                	test   %eax,%eax
 8048997:	75 0a                	jne    80489a3 <errstr+0x30>
        // errstr_init ();
        initialized = true;
 8048999:	c7 05 20 b1 04 08 01 	movl   $0x1,0x804b120
 80489a0:	00 00 00 
    }
    
    if (0 == _error) {
 80489a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 80489a7:	75 0a                	jne    80489b3 <errstr+0x40>
        return "SUCCESS";
 80489a9:	b8 e0 8f 04 08       	mov    $0x8048fe0,%eax
 80489ae:	e9 a5 00 00 00       	jmp    8048a58 <errstr+0xe5>
    }

    if (_error > 0) {
 80489b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 80489b7:	7e 0a                	jle    80489c3 <errstr+0x50>
        return "ERROR_ERRSTR_NOT_NEGATIVE";
 80489b9:	b8 e8 8f 04 08       	mov    $0x8048fe8,%eax
 80489be:	e9 95 00 00 00       	jmp    8048a58 <errstr+0xe5>
    }
    
    if (module_id > MODULE_LAST) {
 80489c3:	83 7d f8 0f          	cmpl   $0xf,-0x8(%ebp)
 80489c7:	76 0a                	jbe    80489d3 <errstr+0x60>
        return "ERROR_ERRSTR_INVALID_MODULEID";
 80489c9:	b8 02 90 04 08       	mov    $0x8049002,%eax
 80489ce:	e9 85 00 00 00       	jmp    8048a58 <errstr+0xe5>
    }
    
    if (!g_errstr_array [module_id].available_) {
 80489d3:	8b 55 f8             	mov    -0x8(%ebp),%edx
 80489d6:	89 d0                	mov    %edx,%eax
 80489d8:	01 c0                	add    %eax,%eax
 80489da:	01 d0                	add    %edx,%eax
 80489dc:	c1 e0 02             	shl    $0x2,%eax
 80489df:	05 60 b0 04 08       	add    $0x804b060,%eax
 80489e4:	8b 00                	mov    (%eax),%eax
 80489e6:	85 c0                	test   %eax,%eax
 80489e8:	75 07                	jne    80489f1 <errstr+0x7e>
        return "ERROR_ERRSTR_NOT_AVAILABLE";
 80489ea:	b8 20 90 04 08       	mov    $0x8049020,%eax
 80489ef:	eb 67                	jmp    8048a58 <errstr+0xe5>
    }
    
    if (error_id > g_errstr_array [module_id].last_error_) {
 80489f1:	8b 55 f8             	mov    -0x8(%ebp),%edx
 80489f4:	89 d0                	mov    %edx,%eax
 80489f6:	01 c0                	add    %eax,%eax
 80489f8:	01 d0                	add    %edx,%eax
 80489fa:	c1 e0 02             	shl    $0x2,%eax
 80489fd:	05 60 b0 04 08       	add    $0x804b060,%eax
 8048a02:	8b 40 04             	mov    0x4(%eax),%eax
 8048a05:	3b 45 fc             	cmp    -0x4(%ebp),%eax
 8048a08:	7d 07                	jge    8048a11 <errstr+0x9e>
        return "ERROR_ERRSTR_OUT_OF_LAST";
 8048a0a:	b8 3b 90 04 08       	mov    $0x804903b,%eax
 8048a0f:	eb 47                	jmp    8048a58 <errstr+0xe5>
    }
    
    if (0 == g_errstr_array [module_id].error_array_ [error_id]) {
 8048a11:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8048a14:	89 d0                	mov    %edx,%eax
 8048a16:	01 c0                	add    %eax,%eax
 8048a18:	01 d0                	add    %edx,%eax
 8048a1a:	c1 e0 02             	shl    $0x2,%eax
 8048a1d:	05 60 b0 04 08       	add    $0x804b060,%eax
 8048a22:	8b 40 08             	mov    0x8(%eax),%eax
 8048a25:	8b 55 fc             	mov    -0x4(%ebp),%edx
 8048a28:	c1 e2 02             	shl    $0x2,%edx
 8048a2b:	01 d0                	add    %edx,%eax
 8048a2d:	8b 00                	mov    (%eax),%eax
 8048a2f:	85 c0                	test   %eax,%eax
 8048a31:	75 07                	jne    8048a3a <errstr+0xc7>
        return "ERROR_ERRSTR_NOT_DEFINED";
 8048a33:	b8 54 90 04 08       	mov    $0x8049054,%eax
 8048a38:	eb 1e                	jmp    8048a58 <errstr+0xe5>
    }

    return g_errstr_array [module_id].error_array_ [error_id];
 8048a3a:	8b 55 f8             	mov    -0x8(%ebp),%edx
 8048a3d:	89 d0                	mov    %edx,%eax
 8048a3f:	01 c0                	add    %eax,%eax
 8048a41:	01 d0                	add    %edx,%eax
 8048a43:	c1 e0 02             	shl    $0x2,%eax
 8048a46:	05 60 b0 04 08       	add    $0x804b060,%eax
 8048a4b:	8b 40 08             	mov    0x8(%eax),%eax
 8048a4e:	8b 55 fc             	mov    -0x4(%ebp),%edx
 8048a51:	c1 e2 02             	shl    $0x2,%edx
 8048a54:	01 d0                	add    %edx,%eax
 8048a56:	8b 00                	mov    (%eax),%eax
}
 8048a58:	c9                   	leave  
 8048a59:	c3                   	ret    

08048a5a <module_timer>:
// 模块的组织，初始化与销毁的源码分析
#include <stdio.h>
#include "module.h"

error_t module_timer (system_state_t _state)
{
 8048a5a:	55                   	push   %ebp
 8048a5b:	89 e5                	mov    %esp,%ebp
 8048a5d:	83 ec 18             	sub    $0x18,%esp
    if (STATE_INITIALIZING == _state) {
 8048a60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 8048a64:	75 0e                	jne    8048a74 <module_timer+0x1a>
        printf ("  Info: timer module is initializing\n");
 8048a66:	c7 04 24 70 90 04 08 	movl   $0x8049070,(%esp)
 8048a6d:	e8 9e f8 ff ff       	call   8048310 <puts@plt>
 8048a72:	eb 3a                	jmp    8048aae <module_timer+0x54>
    }
    else if (STATE_UP == _state) {
 8048a74:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 8048a78:	75 0e                	jne    8048a88 <module_timer+0x2e>
        printf ("  Info: timer module is up\n");
 8048a7a:	c7 04 24 95 90 04 08 	movl   $0x8049095,(%esp)
 8048a81:	e8 8a f8 ff ff       	call   8048310 <puts@plt>
 8048a86:	eb 26                	jmp    8048aae <module_timer+0x54>
    }
    else if (STATE_DOWN == _state) {
 8048a88:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
 8048a8c:	75 0e                	jne    8048a9c <module_timer+0x42>
        printf ("  Info: timer module is down\n");
 8048a8e:	c7 04 24 b0 90 04 08 	movl   $0x80490b0,(%esp)
 8048a95:	e8 76 f8 ff ff       	call   8048310 <puts@plt>
 8048a9a:	eb 12                	jmp    8048aae <module_timer+0x54>
    }
    else if (STATE_DESTROYING == _state) {
 8048a9c:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
 8048aa0:	75 0c                	jne    8048aae <module_timer+0x54>
        printf ("  Info: timer module is destroying\n");
 8048aa2:	c7 04 24 d0 90 04 08 	movl   $0x80490d0,(%esp)
 8048aa9:	e8 62 f8 ff ff       	call   8048310 <puts@plt>
    }
    
    return 0;
 8048aae:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8048ab3:	c9                   	leave  
 8048ab4:	c3                   	ret    

08048ab5 <module_memory>:

error_t module_memory (system_state_t _state)
{
 8048ab5:	55                   	push   %ebp
 8048ab6:	89 e5                	mov    %esp,%ebp
 8048ab8:	83 ec 18             	sub    $0x18,%esp
    if (STATE_INITIALIZING == _state) {
 8048abb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 8048abf:	75 0e                	jne    8048acf <module_memory+0x1a>
        printf ("  Info: memory module is initializing\n");
 8048ac1:	c7 04 24 f4 90 04 08 	movl   $0x80490f4,(%esp)
 8048ac8:	e8 43 f8 ff ff       	call   8048310 <puts@plt>
 8048acd:	eb 3a                	jmp    8048b09 <module_memory+0x54>
    }
    else if (STATE_UP == _state) {
 8048acf:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 8048ad3:	75 0e                	jne    8048ae3 <module_memory+0x2e>
        printf ("  Info: memory module is up\n");
 8048ad5:	c7 04 24 1a 91 04 08 	movl   $0x804911a,(%esp)
 8048adc:	e8 2f f8 ff ff       	call   8048310 <puts@plt>
 8048ae1:	eb 26                	jmp    8048b09 <module_memory+0x54>
    }
    else if (STATE_DOWN == _state) {
 8048ae3:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
 8048ae7:	75 0e                	jne    8048af7 <module_memory+0x42>
        printf ("  Info: memory module is down\n");
 8048ae9:	c7 04 24 36 91 04 08 	movl   $0x8049136,(%esp)
 8048af0:	e8 1b f8 ff ff       	call   8048310 <puts@plt>
 8048af5:	eb 12                	jmp    8048b09 <module_memory+0x54>
    }
    else if (STATE_DESTROYING == _state) {
 8048af7:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
 8048afb:	75 0c                	jne    8048b09 <module_memory+0x54>
        printf ("  Info: memory module is destroying\n");
 8048afd:	c7 04 24 54 91 04 08 	movl   $0x8049154,(%esp)
 8048b04:	e8 07 f8 ff ff       	call   8048310 <puts@plt>
    }
    
    return 0;
 8048b09:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8048b0e:	c9                   	leave  
 8048b0f:	c3                   	ret    

08048b10 <module_registration_entry>:

void module_registration_entry ()
{
 8048b10:	55                   	push   %ebp
 8048b11:	89 e5                	mov    %esp,%ebp
 8048b13:	83 ec 18             	sub    $0x18,%esp
    (void) module_register ("Timer", MODULE_TIMER, OS_LEVEL, module_timer);
 8048b16:	c7 44 24 0c 5a 8a 04 	movl   $0x8048a5a,0xc(%esp)
 8048b1d:	08 
 8048b1e:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 8048b25:	00 
 8048b26:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
 8048b2d:	00 
 8048b2e:	c7 04 24 78 91 04 08 	movl   $0x8049178,(%esp)
 8048b35:	e8 94 00 00 00       	call   8048bce <module_register>
    (void) module_register ("Memory", MODULE_HEAP, OS_LEVEL, module_memory);
 8048b3a:	c7 44 24 0c b5 8a 04 	movl   $0x8048ab5,0xc(%esp)
 8048b41:	08 
 8048b42:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 8048b49:	00 
 8048b4a:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
 8048b51:	00 
 8048b52:	c7 04 24 7e 91 04 08 	movl   $0x804917e,(%esp)
 8048b59:	e8 70 00 00 00       	call   8048bce <module_register>
}
 8048b5e:	c9                   	leave  
 8048b5f:	c3                   	ret    

08048b60 <main>:

int main ()
{
 8048b60:	55                   	push   %ebp
 8048b61:	89 e5                	mov    %esp,%ebp
 8048b63:	83 e4 f0             	and    $0xfffffff0,%esp
 8048b66:	83 ec 10             	sub    $0x10,%esp
	// 模块注册
    module_registration_entry ();
 8048b69:	e8 a2 ff ff ff       	call   8048b10 <module_registration_entry>

	// 启用模块
    printf ("\nSystem is going to be up\n");
 8048b6e:	c7 04 24 85 91 04 08 	movl   $0x8049185,(%esp)
 8048b75:	e8 96 f7 ff ff       	call   8048310 <puts@plt>
    if (0 != system_up ()) {
 8048b7a:	e8 96 01 00 00       	call   8048d15 <system_up>
 8048b7f:	85 c0                	test   %eax,%eax
 8048b81:	74 13                	je     8048b96 <main+0x36>
        printf ("Error: system cannot be up\n");
 8048b83:	c7 04 24 9f 91 04 08 	movl   $0x804919f,(%esp)
 8048b8a:	e8 81 f7 ff ff       	call   8048310 <puts@plt>
        return -1;
 8048b8f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8048b94:	eb 16                	jmp    8048bac <main+0x4c>
    }

	// 终止模块
    printf ("\nSystem is going to be down\n");
 8048b96:	c7 04 24 ba 91 04 08 	movl   $0x80491ba,(%esp)
 8048b9d:	e8 6e f7 ff ff       	call   8048310 <puts@plt>
    system_down ();
 8048ba2:	e8 cb 02 00 00       	call   8048e72 <system_down>
    
    return 0;
 8048ba7:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8048bac:	c9                   	leave  
 8048bad:	c3                   	ret    

08048bae <console_print>:
static dll_t g_levels [LEVEL_COUNT];
static module_init_t g_modules [MODULE_COUNT];
static system_state_t g_state;

static void console_print (const char* _format, ...)
{
 8048bae:	55                   	push   %ebp
 8048baf:	89 e5                	mov    %esp,%ebp
 8048bb1:	83 ec 28             	sub    $0x28,%esp
    va_list arglist;

    va_start (arglist, _format);
 8048bb4:	8d 45 0c             	lea    0xc(%ebp),%eax
 8048bb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    (void) vprintf (_format, arglist);
 8048bba:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048bbd:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048bc1:	8b 45 08             	mov    0x8(%ebp),%eax
 8048bc4:	89 04 24             	mov    %eax,(%esp)
 8048bc7:	e8 64 f7 ff ff       	call   8048330 <vprintf@plt>
    va_end (arglist);
}
 8048bcc:	c9                   	leave  
 8048bcd:	c3                   	ret    

08048bce <module_register>:


error_t module_register (const char _name [], module_t _module, 
    init_level_t _level, module_callback_t _callback)
{
 8048bce:	55                   	push   %ebp
 8048bcf:	89 e5                	mov    %esp,%ebp
 8048bd1:	83 ec 28             	sub    $0x28,%esp
    module_init_t *p_module;

	// 参数合法性判断，这就是防御性编程
    if (_module > MODULE_LAST) {
 8048bd4:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
 8048bd8:	76 0a                	jbe    8048be4 <module_register+0x16>
        return ERROR_T (ERROR_MODULE_REG_INVMODULE);
 8048bda:	b8 00 00 00 80       	mov    $0x80000000,%eax
 8048bdf:	e9 81 00 00 00       	jmp    8048c65 <module_register+0x97>
    }
    if (_level > LEVEL_LAST) {
 8048be4:	83 7d 10 1b          	cmpl   $0x1b,0x10(%ebp)
 8048be8:	76 07                	jbe    8048bf1 <module_register+0x23>
        return ERROR_T (ERROR_MODULE_REG_INVLEVEL);
 8048bea:	b8 01 00 00 80       	mov    $0x80000001,%eax
 8048bef:	eb 74                	jmp    8048c65 <module_register+0x97>
    }
    if (null == _callback) {
 8048bf1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
 8048bf5:	75 07                	jne    8048bfe <module_register+0x30>
        return ERROR_T (ERROR_MODULE_REG_INVCB);
 8048bf7:	b8 02 00 00 80       	mov    $0x80000002,%eax
 8048bfc:	eb 67                	jmp    8048c65 <module_register+0x97>
    }

    p_module = &g_modules [_module];
 8048bfe:	8b 55 0c             	mov    0xc(%ebp),%edx
 8048c01:	89 d0                	mov    %edx,%eax
 8048c03:	c1 e0 02             	shl    $0x2,%eax
 8048c06:	01 d0                	add    %edx,%eax
 8048c08:	c1 e0 02             	shl    $0x2,%eax
 8048c0b:	05 a0 b2 04 08       	add    $0x804b2a0,%eax
 8048c10:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p_module->is_registered_) {
 8048c13:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048c16:	8b 40 10             	mov    0x10(%eax),%eax
 8048c19:	85 c0                	test   %eax,%eax
 8048c1b:	74 07                	je     8048c24 <module_register+0x56>
        return ERROR_T (ERROR_MODULE_REGISTERED);
 8048c1d:	b8 03 00 00 80       	mov    $0x80000003,%eax
 8048c22:	eb 41                	jmp    8048c65 <module_register+0x97>
    }
    p_module->p_name_ = _name;
 8048c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048c27:	8b 55 08             	mov    0x8(%ebp),%edx
 8048c2a:	89 50 08             	mov    %edx,0x8(%eax)
    p_module->callback_ = _callback;
 8048c2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048c30:	8b 55 14             	mov    0x14(%ebp),%edx
 8048c33:	89 50 0c             	mov    %edx,0xc(%eax)
    p_module->is_registered_ = true;
 8048c36:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048c39:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    dll_push_tail (&g_levels [_level], &p_module->node_);
 8048c40:	8b 4d f4             	mov    -0xc(%ebp),%ecx
 8048c43:	8b 55 10             	mov    0x10(%ebp),%edx
 8048c46:	89 d0                	mov    %edx,%eax
 8048c48:	01 c0                	add    %eax,%eax
 8048c4a:	01 d0                	add    %edx,%eax
 8048c4c:	c1 e0 02             	shl    $0x2,%eax
 8048c4f:	05 40 b1 04 08       	add    $0x804b140,%eax
 8048c54:	89 4c 24 04          	mov    %ecx,0x4(%esp)
 8048c58:	89 04 24             	mov    %eax,(%esp)
 8048c5b:	e8 51 f9 ff ff       	call   80485b1 <dll_push_tail>
    
    return 0;
 8048c60:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8048c65:	c9                   	leave  
 8048c66:	c3                   	ret    

08048c67 <init_for_each>:

static bool init_for_each (dll_t *_p_dll, dll_node_t *_p_node, void *_p_arg)
{
 8048c67:	55                   	push   %ebp
 8048c68:	89 e5                	mov    %esp,%ebp
 8048c6a:	83 ec 28             	sub    $0x28,%esp
    module_init_t *p_module = (module_init_t *)_p_node;
 8048c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048c70:	89 45 f0             	mov    %eax,-0x10(%ebp)
    error_t result = p_module->callback_ (STATE_INITIALIZING);
 8048c73:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8048c76:	8b 40 0c             	mov    0xc(%eax),%eax
 8048c79:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8048c80:	ff d0                	call   *%eax
 8048c82:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    UNUSED (_p_dll);
    UNUSED (_p_arg);
    
    if (0 != result) {
 8048c85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8048c89:	74 2c                	je     8048cb7 <init_for_each+0x50>
        console_print ("Error: can't initialize module %s (%s))", 
 8048c8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048c8e:	89 04 24             	mov    %eax,(%esp)
 8048c91:	e8 dd fc ff ff       	call   8048973 <errstr>
 8048c96:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8048c99:	8b 52 08             	mov    0x8(%edx),%edx
 8048c9c:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048ca0:	89 54 24 04          	mov    %edx,0x4(%esp)
 8048ca4:	c7 04 24 d8 91 04 08 	movl   $0x80491d8,(%esp)
 8048cab:	e8 fe fe ff ff       	call   8048bae <console_print>
            p_module->p_name_, errstr (result));
        return false;
 8048cb0:	b8 00 00 00 00       	mov    $0x0,%eax
 8048cb5:	eb 05                	jmp    8048cbc <init_for_each+0x55>
    }
    return true;
 8048cb7:	b8 01 00 00 00       	mov    $0x1,%eax
}
 8048cbc:	c9                   	leave  
 8048cbd:	c3                   	ret    

08048cbe <up_for_each>:

static bool up_for_each (dll_t *_p_dll, dll_node_t *_p_node, void *_p_arg)
{
 8048cbe:	55                   	push   %ebp
 8048cbf:	89 e5                	mov    %esp,%ebp
 8048cc1:	83 ec 28             	sub    $0x28,%esp
    module_init_t *p_module = (module_init_t *)_p_node;
 8048cc4:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048cc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    error_t result = p_module->callback_ (STATE_UP);
 8048cca:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8048ccd:	8b 40 0c             	mov    0xc(%eax),%eax
 8048cd0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8048cd7:	ff d0                	call   *%eax
 8048cd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    UNUSED (_p_dll);
    UNUSED (_p_arg);
    
    if (0 != result) {
 8048cdc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8048ce0:	74 2c                	je     8048d0e <up_for_each+0x50>
         console_print ("Error: can't start up module %s (%s))", 
 8048ce2:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048ce5:	89 04 24             	mov    %eax,(%esp)
 8048ce8:	e8 86 fc ff ff       	call   8048973 <errstr>
 8048ced:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8048cf0:	8b 52 08             	mov    0x8(%edx),%edx
 8048cf3:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048cf7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8048cfb:	c7 04 24 00 92 04 08 	movl   $0x8049200,(%esp)
 8048d02:	e8 a7 fe ff ff       	call   8048bae <console_print>
            p_module->p_name_, errstr (result));
        return false;
 8048d07:	b8 00 00 00 00       	mov    $0x0,%eax
 8048d0c:	eb 05                	jmp    8048d13 <up_for_each+0x55>
    }
    return true;
 8048d0e:	b8 01 00 00 00       	mov    $0x1,%eax
}
 8048d13:	c9                   	leave  
 8048d14:	c3                   	ret    

08048d15 <system_up>:

error_t system_up ()
{
 8048d15:	55                   	push   %ebp
 8048d16:	89 e5                	mov    %esp,%ebp
 8048d18:	83 ec 28             	sub    $0x28,%esp
    init_level_t level;

    g_state = STATE_INITIALIZING;
 8048d1b:	c7 05 e0 b3 04 08 00 	movl   $0x0,0x804b3e0
 8048d22:	00 00 00 
    for (level = LEVEL_FIRST; level <= LEVEL_LAST; ++ level) {
 8048d25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 8048d2c:	eb 3d                	jmp    8048d6b <system_up+0x56>
        if (0 != dll_traverse (&g_levels [level], init_for_each, 
 8048d2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8048d31:	89 d0                	mov    %edx,%eax
 8048d33:	01 c0                	add    %eax,%eax
 8048d35:	01 d0                	add    %edx,%eax
 8048d37:	c1 e0 02             	shl    $0x2,%eax
 8048d3a:	8d 90 40 b1 04 08    	lea    0x804b140(%eax),%edx
 8048d40:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8048d43:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048d47:	c7 44 24 04 67 8c 04 	movl   $0x8048c67,0x4(%esp)
 8048d4e:	08 
 8048d4f:	89 14 24             	mov    %edx,(%esp)
 8048d52:	e8 fd f9 ff ff       	call   8048754 <dll_traverse>
 8048d57:	85 c0                	test   %eax,%eax
 8048d59:	74 07                	je     8048d62 <system_up+0x4d>
            (void *)&level)) {
            return ERROR_T (ERROR_MODULE_INIT_FAILURE);
 8048d5b:	b8 04 00 00 80       	mov    $0x80000004,%eax
 8048d60:	eb 6e                	jmp    8048dd0 <system_up+0xbb>
error_t system_up ()
{
    init_level_t level;

    g_state = STATE_INITIALIZING;
    for (level = LEVEL_FIRST; level <= LEVEL_LAST; ++ level) {
 8048d62:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048d65:	83 c0 01             	add    $0x1,%eax
 8048d68:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8048d6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048d6e:	83 f8 1b             	cmp    $0x1b,%eax
 8048d71:	76 bb                	jbe    8048d2e <system_up+0x19>
            (void *)&level)) {
            return ERROR_T (ERROR_MODULE_INIT_FAILURE);
        }
    }
    
    g_state = STATE_UP;
 8048d73:	c7 05 e0 b3 04 08 01 	movl   $0x1,0x804b3e0
 8048d7a:	00 00 00 
    for (level = LEVEL_FIRST; level <= LEVEL_LAST; ++ level) {
 8048d7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 8048d84:	eb 3d                	jmp    8048dc3 <system_up+0xae>
        if (0 != dll_traverse (&g_levels [level], up_for_each, 
 8048d86:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8048d89:	89 d0                	mov    %edx,%eax
 8048d8b:	01 c0                	add    %eax,%eax
 8048d8d:	01 d0                	add    %edx,%eax
 8048d8f:	c1 e0 02             	shl    $0x2,%eax
 8048d92:	8d 90 40 b1 04 08    	lea    0x804b140(%eax),%edx
 8048d98:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8048d9b:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048d9f:	c7 44 24 04 be 8c 04 	movl   $0x8048cbe,0x4(%esp)
 8048da6:	08 
 8048da7:	89 14 24             	mov    %edx,(%esp)
 8048daa:	e8 a5 f9 ff ff       	call   8048754 <dll_traverse>
 8048daf:	85 c0                	test   %eax,%eax
 8048db1:	74 07                	je     8048dba <system_up+0xa5>
            (void *)&level)) {
            return ERROR_T (ERROR_MODULE_UP_FAILURE);
 8048db3:	b8 05 00 00 80       	mov    $0x80000005,%eax
 8048db8:	eb 16                	jmp    8048dd0 <system_up+0xbb>
            return ERROR_T (ERROR_MODULE_INIT_FAILURE);
        }
    }
    
    g_state = STATE_UP;
    for (level = LEVEL_FIRST; level <= LEVEL_LAST; ++ level) {
 8048dba:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048dbd:	83 c0 01             	add    $0x1,%eax
 8048dc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8048dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048dc6:	83 f8 1b             	cmp    $0x1b,%eax
 8048dc9:	76 bb                	jbe    8048d86 <system_up+0x71>
            (void *)&level)) {
            return ERROR_T (ERROR_MODULE_UP_FAILURE);
        }
    }
    
    return 0;
 8048dcb:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8048dd0:	c9                   	leave  
 8048dd1:	c3                   	ret    

08048dd2 <down_for_each>:

static bool down_for_each (dll_t *_p_dll, dll_node_t *_p_node, void *_p_arg)
{
 8048dd2:	55                   	push   %ebp
 8048dd3:	89 e5                	mov    %esp,%ebp
 8048dd5:	83 ec 28             	sub    $0x28,%esp
    module_init_t *p_module = (module_init_t *)_p_node;
 8048dd8:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048ddb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    error_t result = p_module->callback_ (STATE_DOWN);
 8048dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8048de1:	8b 40 0c             	mov    0xc(%eax),%eax
 8048de4:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 8048deb:	ff d0                	call   *%eax
 8048ded:	89 45 f4             	mov    %eax,-0xc(%ebp)

    UNUSED (_p_dll);
    UNUSED (_p_arg);
    
    if (0 != result) {
 8048df0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8048df4:	74 25                	je     8048e1b <down_for_each+0x49>
         console_print ("Error: can't shut down module \"%s\" (%s)", 
 8048df6:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048df9:	89 04 24             	mov    %eax,(%esp)
 8048dfc:	e8 72 fb ff ff       	call   8048973 <errstr>
 8048e01:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8048e04:	8b 52 08             	mov    0x8(%edx),%edx
 8048e07:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048e0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8048e0f:	c7 04 24 28 92 04 08 	movl   $0x8049228,(%esp)
 8048e16:	e8 93 fd ff ff       	call   8048bae <console_print>
            p_module->p_name_, errstr (result));
        // !!! don't return false
    }
    return true;
 8048e1b:	b8 01 00 00 00       	mov    $0x1,%eax
}
 8048e20:	c9                   	leave  
 8048e21:	c3                   	ret    

08048e22 <destroy_for_each>:

static bool destroy_for_each (dll_t *_p_dll, dll_node_t *_p_node, void *_p_arg)
{
 8048e22:	55                   	push   %ebp
 8048e23:	89 e5                	mov    %esp,%ebp
 8048e25:	83 ec 28             	sub    $0x28,%esp
    module_init_t *p_module = (module_init_t *)_p_node;
 8048e28:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048e2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    error_t result = p_module->callback_ (STATE_DESTROYING);
 8048e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8048e31:	8b 40 0c             	mov    0xc(%eax),%eax
 8048e34:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
 8048e3b:	ff d0                	call   *%eax
 8048e3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    UNUSED (_p_dll);
    UNUSED (_p_arg);
    
    if (0 != result) {
 8048e40:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8048e44:	74 25                	je     8048e6b <destroy_for_each+0x49>
         console_print ("Error: can't destroy module \"%s\" (%s)", 
 8048e46:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048e49:	89 04 24             	mov    %eax,(%esp)
 8048e4c:	e8 22 fb ff ff       	call   8048973 <errstr>
 8048e51:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8048e54:	8b 52 08             	mov    0x8(%edx),%edx
 8048e57:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048e5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8048e5f:	c7 04 24 50 92 04 08 	movl   $0x8049250,(%esp)
 8048e66:	e8 43 fd ff ff       	call   8048bae <console_print>
            p_module->p_name_, errstr (result));
        // !!! don't return false
    }
    return true;
 8048e6b:	b8 01 00 00 00       	mov    $0x1,%eax
}
 8048e70:	c9                   	leave  
 8048e71:	c3                   	ret    

08048e72 <system_down>:

void system_down ()
{
 8048e72:	55                   	push   %ebp
 8048e73:	89 e5                	mov    %esp,%ebp
 8048e75:	83 ec 28             	sub    $0x28,%esp
    init_level_t level;
    
    g_state = STATE_DOWN;
 8048e78:	c7 05 e0 b3 04 08 02 	movl   $0x2,0x804b3e0
 8048e7f:	00 00 00 
    for (level = LEVEL_LAST; level > LEVEL_FIRST; -- level) {
 8048e82:	c7 45 f4 1b 00 00 00 	movl   $0x1b,-0xc(%ebp)
 8048e89:	eb 2d                	jmp    8048eb8 <system_down+0x46>
        (void) dll_traverse_reversely (&g_levels [level], down_for_each, null);
 8048e8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8048e8e:	89 d0                	mov    %edx,%eax
 8048e90:	01 c0                	add    %eax,%eax
 8048e92:	01 d0                	add    %edx,%eax
 8048e94:	c1 e0 02             	shl    $0x2,%eax
 8048e97:	05 40 b1 04 08       	add    $0x804b140,%eax
 8048e9c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8048ea3:	00 
 8048ea4:	c7 44 24 04 d2 8d 04 	movl   $0x8048dd2,0x4(%esp)
 8048eab:	08 
 8048eac:	89 04 24             	mov    %eax,(%esp)
 8048eaf:	e8 e4 f8 ff ff       	call   8048798 <dll_traverse_reversely>
void system_down ()
{
    init_level_t level;
    
    g_state = STATE_DOWN;
    for (level = LEVEL_LAST; level > LEVEL_FIRST; -- level) {
 8048eb4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
 8048eb8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8048ebc:	75 cd                	jne    8048e8b <system_down+0x19>
        (void) dll_traverse_reversely (&g_levels [level], down_for_each, null);
    }
    (void) dll_traverse_reversely (&g_levels [LEVEL_FIRST], down_for_each, null);
 8048ebe:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8048ec5:	00 
 8048ec6:	c7 44 24 04 d2 8d 04 	movl   $0x8048dd2,0x4(%esp)
 8048ecd:	08 
 8048ece:	c7 04 24 40 b1 04 08 	movl   $0x804b140,(%esp)
 8048ed5:	e8 be f8 ff ff       	call   8048798 <dll_traverse_reversely>
    
    g_state = STATE_DESTROYING;
 8048eda:	c7 05 e0 b3 04 08 03 	movl   $0x3,0x804b3e0
 8048ee1:	00 00 00 
    for (level = LEVEL_LAST; level > LEVEL_FIRST; -- level) {
 8048ee4:	c7 45 f4 1b 00 00 00 	movl   $0x1b,-0xc(%ebp)
 8048eeb:	eb 2d                	jmp    8048f1a <system_down+0xa8>
        (void) dll_traverse_reversely (&g_levels [level], destroy_for_each, null);
 8048eed:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8048ef0:	89 d0                	mov    %edx,%eax
 8048ef2:	01 c0                	add    %eax,%eax
 8048ef4:	01 d0                	add    %edx,%eax
 8048ef6:	c1 e0 02             	shl    $0x2,%eax
 8048ef9:	05 40 b1 04 08       	add    $0x804b140,%eax
 8048efe:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8048f05:	00 
 8048f06:	c7 44 24 04 22 8e 04 	movl   $0x8048e22,0x4(%esp)
 8048f0d:	08 
 8048f0e:	89 04 24             	mov    %eax,(%esp)
 8048f11:	e8 82 f8 ff ff       	call   8048798 <dll_traverse_reversely>
        (void) dll_traverse_reversely (&g_levels [level], down_for_each, null);
    }
    (void) dll_traverse_reversely (&g_levels [LEVEL_FIRST], down_for_each, null);
    
    g_state = STATE_DESTROYING;
    for (level = LEVEL_LAST; level > LEVEL_FIRST; -- level) {
 8048f16:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
 8048f1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8048f1e:	75 cd                	jne    8048eed <system_down+0x7b>
        (void) dll_traverse_reversely (&g_levels [level], destroy_for_each, null);
    }
    (void) dll_traverse_reversely (&g_levels [LEVEL_FIRST], destroy_for_each, null);
 8048f20:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 8048f27:	00 
 8048f28:	c7 44 24 04 22 8e 04 	movl   $0x8048e22,0x4(%esp)
 8048f2f:	08 
 8048f30:	c7 04 24 40 b1 04 08 	movl   $0x804b140,(%esp)
 8048f37:	e8 5c f8 ff ff       	call   8048798 <dll_traverse_reversely>
}
 8048f3c:	c9                   	leave  
 8048f3d:	c3                   	ret    

08048f3e <system_state>:

system_state_t system_state ()
{
 8048f3e:	55                   	push   %ebp
 8048f3f:	89 e5                	mov    %esp,%ebp
    return g_state;
 8048f41:	a1 e0 b3 04 08       	mov    0x804b3e0,%eax
}
 8048f46:	5d                   	pop    %ebp
 8048f47:	c3                   	ret    
 8048f48:	66 90                	xchg   %ax,%ax
 8048f4a:	66 90                	xchg   %ax,%ax
 8048f4c:	66 90                	xchg   %ax,%ax
 8048f4e:	66 90                	xchg   %ax,%ax

08048f50 <__libc_csu_init>:
 8048f50:	55                   	push   %ebp
 8048f51:	57                   	push   %edi
 8048f52:	31 ff                	xor    %edi,%edi
 8048f54:	56                   	push   %esi
 8048f55:	53                   	push   %ebx
 8048f56:	e8 25 f4 ff ff       	call   8048380 <__x86.get_pc_thunk.bx>
 8048f5b:	81 c3 a5 20 00 00    	add    $0x20a5,%ebx
 8048f61:	83 ec 1c             	sub    $0x1c,%esp
 8048f64:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048f68:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 8048f6e:	e8 61 f3 ff ff       	call   80482d4 <_init>
 8048f73:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 8048f79:	29 c6                	sub    %eax,%esi
 8048f7b:	c1 fe 02             	sar    $0x2,%esi
 8048f7e:	85 f6                	test   %esi,%esi
 8048f80:	74 27                	je     8048fa9 <__libc_csu_init+0x59>
 8048f82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048f88:	8b 44 24 38          	mov    0x38(%esp),%eax
 8048f8c:	89 2c 24             	mov    %ebp,(%esp)
 8048f8f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048f93:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048f97:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048f9b:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 8048fa2:	83 c7 01             	add    $0x1,%edi
 8048fa5:	39 f7                	cmp    %esi,%edi
 8048fa7:	75 df                	jne    8048f88 <__libc_csu_init+0x38>
 8048fa9:	83 c4 1c             	add    $0x1c,%esp
 8048fac:	5b                   	pop    %ebx
 8048fad:	5e                   	pop    %esi
 8048fae:	5f                   	pop    %edi
 8048faf:	5d                   	pop    %ebp
 8048fb0:	c3                   	ret    
 8048fb1:	eb 0d                	jmp    8048fc0 <__libc_csu_fini>
 8048fb3:	90                   	nop
 8048fb4:	90                   	nop
 8048fb5:	90                   	nop
 8048fb6:	90                   	nop
 8048fb7:	90                   	nop
 8048fb8:	90                   	nop
 8048fb9:	90                   	nop
 8048fba:	90                   	nop
 8048fbb:	90                   	nop
 8048fbc:	90                   	nop
 8048fbd:	90                   	nop
 8048fbe:	90                   	nop
 8048fbf:	90                   	nop

08048fc0 <__libc_csu_fini>:
 8048fc0:	f3 c3                	repz ret 

Disassembly of section .fini:

08048fc4 <_fini>:
 8048fc4:	53                   	push   %ebx
 8048fc5:	83 ec 08             	sub    $0x8,%esp
 8048fc8:	e8 b3 f3 ff ff       	call   8048380 <__x86.get_pc_thunk.bx>
 8048fcd:	81 c3 33 20 00 00    	add    $0x2033,%ebx
 8048fd3:	83 c4 08             	add    $0x8,%esp
 8048fd6:	5b                   	pop    %ebx
 8048fd7:	c3                   	ret    
