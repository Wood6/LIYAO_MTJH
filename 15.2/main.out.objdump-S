
main.out:     file format elf32-i386


Disassembly of section .init:

080482b4 <_init>:
 80482b4:	53                   	push   %ebx
 80482b5:	83 ec 08             	sub    $0x8,%esp
 80482b8:	e8 93 00 00 00       	call   8048350 <__x86.get_pc_thunk.bx>
 80482bd:	81 c3 43 1d 00 00    	add    $0x1d43,%ebx
 80482c3:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 80482c9:	85 c0                	test   %eax,%eax
 80482cb:	74 05                	je     80482d2 <_init+0x1e>
 80482cd:	e8 2e 00 00 00       	call   8048300 <__gmon_start__@plt>
 80482d2:	83 c4 08             	add    $0x8,%esp
 80482d5:	5b                   	pop    %ebx
 80482d6:	c3                   	ret    

Disassembly of section .plt:

080482e0 <printf@plt-0x10>:
 80482e0:	ff 35 04 a0 04 08    	pushl  0x804a004
 80482e6:	ff 25 08 a0 04 08    	jmp    *0x804a008
 80482ec:	00 00                	add    %al,(%eax)
	...

080482f0 <printf@plt>:
 80482f0:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 80482f6:	68 00 00 00 00       	push   $0x0
 80482fb:	e9 e0 ff ff ff       	jmp    80482e0 <_init+0x2c>

08048300 <__gmon_start__@plt>:
 8048300:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048306:	68 08 00 00 00       	push   $0x8
 804830b:	e9 d0 ff ff ff       	jmp    80482e0 <_init+0x2c>

08048310 <__libc_start_main@plt>:
 8048310:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048316:	68 10 00 00 00       	push   $0x10
 804831b:	e9 c0 ff ff ff       	jmp    80482e0 <_init+0x2c>

Disassembly of section .text:

08048320 <_start>:
 8048320:	31 ed                	xor    %ebp,%ebp
 8048322:	5e                   	pop    %esi
 8048323:	89 e1                	mov    %esp,%ecx
 8048325:	83 e4 f0             	and    $0xfffffff0,%esp
 8048328:	50                   	push   %eax
 8048329:	54                   	push   %esp
 804832a:	52                   	push   %edx
 804832b:	68 50 85 04 08       	push   $0x8048550
 8048330:	68 e0 84 04 08       	push   $0x80484e0
 8048335:	51                   	push   %ecx
 8048336:	56                   	push   %esi
 8048337:	68 49 84 04 08       	push   $0x8048449
 804833c:	e8 cf ff ff ff       	call   8048310 <__libc_start_main@plt>
 8048341:	f4                   	hlt    
 8048342:	66 90                	xchg   %ax,%ax
 8048344:	66 90                	xchg   %ax,%ax
 8048346:	66 90                	xchg   %ax,%ax
 8048348:	66 90                	xchg   %ax,%ax
 804834a:	66 90                	xchg   %ax,%ax
 804834c:	66 90                	xchg   %ax,%ax
 804834e:	66 90                	xchg   %ax,%ax

08048350 <__x86.get_pc_thunk.bx>:
 8048350:	8b 1c 24             	mov    (%esp),%ebx
 8048353:	c3                   	ret    
 8048354:	66 90                	xchg   %ax,%ax
 8048356:	66 90                	xchg   %ax,%ax
 8048358:	66 90                	xchg   %ax,%ax
 804835a:	66 90                	xchg   %ax,%ax
 804835c:	66 90                	xchg   %ax,%ax
 804835e:	66 90                	xchg   %ax,%ax

08048360 <deregister_tm_clones>:
 8048360:	b8 23 a0 04 08       	mov    $0x804a023,%eax
 8048365:	2d 20 a0 04 08       	sub    $0x804a020,%eax
 804836a:	83 f8 06             	cmp    $0x6,%eax
 804836d:	77 01                	ja     8048370 <deregister_tm_clones+0x10>
 804836f:	c3                   	ret    
 8048370:	b8 00 00 00 00       	mov    $0x0,%eax
 8048375:	85 c0                	test   %eax,%eax
 8048377:	74 f6                	je     804836f <deregister_tm_clones+0xf>
 8048379:	55                   	push   %ebp
 804837a:	89 e5                	mov    %esp,%ebp
 804837c:	83 ec 18             	sub    $0x18,%esp
 804837f:	c7 04 24 20 a0 04 08 	movl   $0x804a020,(%esp)
 8048386:	ff d0                	call   *%eax
 8048388:	c9                   	leave  
 8048389:	c3                   	ret    
 804838a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08048390 <register_tm_clones>:
 8048390:	b8 20 a0 04 08       	mov    $0x804a020,%eax
 8048395:	2d 20 a0 04 08       	sub    $0x804a020,%eax
 804839a:	c1 f8 02             	sar    $0x2,%eax
 804839d:	89 c2                	mov    %eax,%edx
 804839f:	c1 ea 1f             	shr    $0x1f,%edx
 80483a2:	01 d0                	add    %edx,%eax
 80483a4:	d1 f8                	sar    %eax
 80483a6:	75 01                	jne    80483a9 <register_tm_clones+0x19>
 80483a8:	c3                   	ret    
 80483a9:	ba 00 00 00 00       	mov    $0x0,%edx
 80483ae:	85 d2                	test   %edx,%edx
 80483b0:	74 f6                	je     80483a8 <register_tm_clones+0x18>
 80483b2:	55                   	push   %ebp
 80483b3:	89 e5                	mov    %esp,%ebp
 80483b5:	83 ec 18             	sub    $0x18,%esp
 80483b8:	89 44 24 04          	mov    %eax,0x4(%esp)
 80483bc:	c7 04 24 20 a0 04 08 	movl   $0x804a020,(%esp)
 80483c3:	ff d2                	call   *%edx
 80483c5:	c9                   	leave  
 80483c6:	c3                   	ret    
 80483c7:	89 f6                	mov    %esi,%esi
 80483c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080483d0 <__do_global_dtors_aux>:
 80483d0:	80 3d 20 a0 04 08 00 	cmpb   $0x0,0x804a020
 80483d7:	75 13                	jne    80483ec <__do_global_dtors_aux+0x1c>
 80483d9:	55                   	push   %ebp
 80483da:	89 e5                	mov    %esp,%ebp
 80483dc:	83 ec 08             	sub    $0x8,%esp
 80483df:	e8 7c ff ff ff       	call   8048360 <deregister_tm_clones>
 80483e4:	c6 05 20 a0 04 08 01 	movb   $0x1,0x804a020
 80483eb:	c9                   	leave  
 80483ec:	f3 c3                	repz ret 
 80483ee:	66 90                	xchg   %ax,%ax

080483f0 <frame_dummy>:
 80483f0:	a1 10 9f 04 08       	mov    0x8049f10,%eax
 80483f5:	85 c0                	test   %eax,%eax
 80483f7:	74 1f                	je     8048418 <frame_dummy+0x28>
 80483f9:	b8 00 00 00 00       	mov    $0x0,%eax
 80483fe:	85 c0                	test   %eax,%eax
 8048400:	74 16                	je     8048418 <frame_dummy+0x28>
 8048402:	55                   	push   %ebp
 8048403:	89 e5                	mov    %esp,%ebp
 8048405:	83 ec 18             	sub    $0x18,%esp
 8048408:	c7 04 24 10 9f 04 08 	movl   $0x8049f10,(%esp)
 804840f:	ff d0                	call   *%eax
 8048411:	c9                   	leave  
 8048412:	e9 79 ff ff ff       	jmp    8048390 <register_tm_clones>
 8048417:	90                   	nop
 8048418:	e9 73 ff ff ff       	jmp    8048390 <register_tm_clones>

0804841d <test>:
// 函数返回时，返回值在哪里？
// ABI 调用约定：规范函数参数和返回值的细节（参数入栈顺序、谁进行栈清理，返回值怎样返回的等约定）
#include <stdio.h>

int test(int a, int b, int c)
{
 804841d:	55                   	push   %ebp
 804841e:	89 e5                	mov    %esp,%ebp
	return a + b + c;
 8048420:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048423:	8b 55 08             	mov    0x8(%ebp),%edx
 8048426:	01 c2                	add    %eax,%edx
 8048428:	8b 45 10             	mov    0x10(%ebp),%eax
 804842b:	01 d0                	add    %edx,%eax
}
 804842d:	5d                   	pop    %ebp
 804842e:	c3                   	ret    

0804842f <func_1>:

// 三个不同的调用约定，反汇编观察参数入栈、清栈者等信息
void __attribute__((__cdecl__)) func_1(int a, int b)
{
 804842f:	55                   	push   %ebp
 8048430:	89 e5                	mov    %esp,%ebp
}
 8048432:	5d                   	pop    %ebp
 8048433:	c3                   	ret    

08048434 <func_2>:

void __attribute__((__stdcall__)) func_2(int a, int b)
{
 8048434:	55                   	push   %ebp
 8048435:	89 e5                	mov    %esp,%ebp
}
 8048437:	5d                   	pop    %ebp
 8048438:	c2 08 00             	ret    $0x8

0804843b <func_3>:

void __attribute__((__fastcall__)) func_3(int a, int b)
{
 804843b:	55                   	push   %ebp
 804843c:	89 e5                	mov    %esp,%ebp
 804843e:	83 ec 08             	sub    $0x8,%esp
 8048441:	89 4d fc             	mov    %ecx,-0x4(%ebp)
 8048444:	89 55 f8             	mov    %edx,-0x8(%ebp)
}
 8048447:	c9                   	leave  
 8048448:	c3                   	ret    

08048449 <main>:

int main()
{
 8048449:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 804844d:	83 e4 f0             	and    $0xfffffff0,%esp
 8048450:	ff 71 fc             	pushl  -0x4(%ecx)
 8048453:	55                   	push   %ebp
 8048454:	89 e5                	mov    %esp,%ebp
 8048456:	51                   	push   %ecx
 8048457:	83 ec 24             	sub    $0x24,%esp
	int a = 1;
 804845a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	int b = 2;
 8048461:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	int r = test(1, 2, 3);   // 反汇编，观察函数的返回值（存放于 eax 中）
 8048468:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 804846f:	00 
 8048470:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 8048477:	00 
 8048478:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804847f:	e8 99 ff ff ff       	call   804841d <test>
 8048484:	89 45 f4             	mov    %eax,-0xc(%ebp)
	
	func_1(a, b);
 8048487:	8b 45 f0             	mov    -0x10(%ebp),%eax
 804848a:	89 44 24 04          	mov    %eax,0x4(%esp)
 804848e:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8048491:	89 04 24             	mov    %eax,(%esp)
 8048494:	e8 96 ff ff ff       	call   804842f <func_1>
	func_2(a, b);
 8048499:	8b 45 f0             	mov    -0x10(%ebp),%eax
 804849c:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
 80484a3:	89 04 24             	mov    %eax,(%esp)
 80484a6:	e8 89 ff ff ff       	call   8048434 <func_2>
 80484ab:	83 ec 08             	sub    $0x8,%esp
	func_3(a, b);
 80484ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
 80484b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
 80484b4:	89 c1                	mov    %eax,%ecx
 80484b6:	e8 80 ff ff ff       	call   804843b <func_3>
	
	printf("r = %d\n", r);
 80484bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80484be:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484c2:	c7 04 24 70 85 04 08 	movl   $0x8048570,(%esp)
 80484c9:	e8 22 fe ff ff       	call   80482f0 <printf@plt>
	
	return 0;
 80484ce:	b8 00 00 00 00       	mov    $0x0,%eax
 80484d3:	8b 4d fc             	mov    -0x4(%ebp),%ecx
 80484d6:	c9                   	leave  
 80484d7:	8d 61 fc             	lea    -0x4(%ecx),%esp
 80484da:	c3                   	ret    
 80484db:	66 90                	xchg   %ax,%ax
 80484dd:	66 90                	xchg   %ax,%ax
 80484df:	90                   	nop

080484e0 <__libc_csu_init>:
 80484e0:	55                   	push   %ebp
 80484e1:	57                   	push   %edi
 80484e2:	31 ff                	xor    %edi,%edi
 80484e4:	56                   	push   %esi
 80484e5:	53                   	push   %ebx
 80484e6:	e8 65 fe ff ff       	call   8048350 <__x86.get_pc_thunk.bx>
 80484eb:	81 c3 15 1b 00 00    	add    $0x1b15,%ebx
 80484f1:	83 ec 1c             	sub    $0x1c,%esp
 80484f4:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 80484f8:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 80484fe:	e8 b1 fd ff ff       	call   80482b4 <_init>
 8048503:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 8048509:	29 c6                	sub    %eax,%esi
 804850b:	c1 fe 02             	sar    $0x2,%esi
 804850e:	85 f6                	test   %esi,%esi
 8048510:	74 27                	je     8048539 <__libc_csu_init+0x59>
 8048512:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048518:	8b 44 24 38          	mov    0x38(%esp),%eax
 804851c:	89 2c 24             	mov    %ebp,(%esp)
 804851f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048523:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048527:	89 44 24 04          	mov    %eax,0x4(%esp)
 804852b:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 8048532:	83 c7 01             	add    $0x1,%edi
 8048535:	39 f7                	cmp    %esi,%edi
 8048537:	75 df                	jne    8048518 <__libc_csu_init+0x38>
 8048539:	83 c4 1c             	add    $0x1c,%esp
 804853c:	5b                   	pop    %ebx
 804853d:	5e                   	pop    %esi
 804853e:	5f                   	pop    %edi
 804853f:	5d                   	pop    %ebp
 8048540:	c3                   	ret    
 8048541:	eb 0d                	jmp    8048550 <__libc_csu_fini>
 8048543:	90                   	nop
 8048544:	90                   	nop
 8048545:	90                   	nop
 8048546:	90                   	nop
 8048547:	90                   	nop
 8048548:	90                   	nop
 8048549:	90                   	nop
 804854a:	90                   	nop
 804854b:	90                   	nop
 804854c:	90                   	nop
 804854d:	90                   	nop
 804854e:	90                   	nop
 804854f:	90                   	nop

08048550 <__libc_csu_fini>:
 8048550:	f3 c3                	repz ret 

Disassembly of section .fini:

08048554 <_fini>:
 8048554:	53                   	push   %ebx
 8048555:	83 ec 08             	sub    $0x8,%esp
 8048558:	e8 f3 fd ff ff       	call   8048350 <__x86.get_pc_thunk.bx>
 804855d:	81 c3 a3 1a 00 00    	add    $0x1aa3,%ebx
 8048563:	83 c4 08             	add    $0x8,%esp
 8048566:	5b                   	pop    %ebx
 8048567:	c3                   	ret    
