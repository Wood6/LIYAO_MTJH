
main-NoOptimize.out:     file format elf32-i386


Disassembly of section .init:

080483b8 <_init>:
 80483b8:	53                   	push   %ebx
 80483b9:	83 ec 08             	sub    $0x8,%esp
 80483bc:	e8 af 00 00 00       	call   8048470 <__x86.get_pc_thunk.bx>
 80483c1:	81 c3 3f 1c 00 00    	add    $0x1c3f,%ebx
 80483c7:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 80483cd:	85 c0                	test   %eax,%eax
 80483cf:	74 05                	je     80483d6 <_init+0x1e>
 80483d1:	e8 3a 00 00 00       	call   8048410 <__gmon_start__@plt>
 80483d6:	83 c4 08             	add    $0x8,%esp
 80483d9:	5b                   	pop    %ebx
 80483da:	c3                   	ret    

Disassembly of section .plt:

080483e0 <printf@plt-0x10>:
 80483e0:	ff 35 04 a0 04 08    	pushl  0x804a004
 80483e6:	ff 25 08 a0 04 08    	jmp    *0x804a008
 80483ec:	00 00                	add    %al,(%eax)
	...

080483f0 <printf@plt>:
 80483f0:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 80483f6:	68 00 00 00 00       	push   $0x0
 80483fb:	e9 e0 ff ff ff       	jmp    80483e0 <_init+0x28>

08048400 <sleep@plt>:
 8048400:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048406:	68 08 00 00 00       	push   $0x8
 804840b:	e9 d0 ff ff ff       	jmp    80483e0 <_init+0x28>

08048410 <__gmon_start__@plt>:
 8048410:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048416:	68 10 00 00 00       	push   $0x10
 804841b:	e9 c0 ff ff ff       	jmp    80483e0 <_init+0x28>

08048420 <__libc_start_main@plt>:
 8048420:	ff 25 18 a0 04 08    	jmp    *0x804a018
 8048426:	68 18 00 00 00       	push   $0x18
 804842b:	e9 b0 ff ff ff       	jmp    80483e0 <_init+0x28>

08048430 <pthread_create@plt>:
 8048430:	ff 25 1c a0 04 08    	jmp    *0x804a01c
 8048436:	68 20 00 00 00       	push   $0x20
 804843b:	e9 a0 ff ff ff       	jmp    80483e0 <_init+0x28>

Disassembly of section .text:

08048440 <_start>:
 8048440:	31 ed                	xor    %ebp,%ebp
 8048442:	5e                   	pop    %esi
 8048443:	89 e1                	mov    %esp,%ecx
 8048445:	83 e4 f0             	and    $0xfffffff0,%esp
 8048448:	50                   	push   %eax
 8048449:	54                   	push   %esp
 804844a:	52                   	push   %edx
 804844b:	68 70 86 04 08       	push   $0x8048670
 8048450:	68 00 86 04 08       	push   $0x8048600
 8048455:	51                   	push   %ecx
 8048456:	56                   	push   %esi
 8048457:	68 a2 85 04 08       	push   $0x80485a2
 804845c:	e8 bf ff ff ff       	call   8048420 <__libc_start_main@plt>
 8048461:	f4                   	hlt    
 8048462:	66 90                	xchg   %ax,%ax
 8048464:	66 90                	xchg   %ax,%ax
 8048466:	66 90                	xchg   %ax,%ax
 8048468:	66 90                	xchg   %ax,%ax
 804846a:	66 90                	xchg   %ax,%ax
 804846c:	66 90                	xchg   %ax,%ax
 804846e:	66 90                	xchg   %ax,%ax

08048470 <__x86.get_pc_thunk.bx>:
 8048470:	8b 1c 24             	mov    (%esp),%ebx
 8048473:	c3                   	ret    
 8048474:	66 90                	xchg   %ax,%ax
 8048476:	66 90                	xchg   %ax,%ax
 8048478:	66 90                	xchg   %ax,%ax
 804847a:	66 90                	xchg   %ax,%ax
 804847c:	66 90                	xchg   %ax,%ax
 804847e:	66 90                	xchg   %ax,%ax

08048480 <deregister_tm_clones>:
 8048480:	b8 2b a0 04 08       	mov    $0x804a02b,%eax
 8048485:	2d 28 a0 04 08       	sub    $0x804a028,%eax
 804848a:	83 f8 06             	cmp    $0x6,%eax
 804848d:	77 01                	ja     8048490 <deregister_tm_clones+0x10>
 804848f:	c3                   	ret    
 8048490:	b8 00 00 00 00       	mov    $0x0,%eax
 8048495:	85 c0                	test   %eax,%eax
 8048497:	74 f6                	je     804848f <deregister_tm_clones+0xf>
 8048499:	55                   	push   %ebp
 804849a:	89 e5                	mov    %esp,%ebp
 804849c:	83 ec 18             	sub    $0x18,%esp
 804849f:	c7 04 24 28 a0 04 08 	movl   $0x804a028,(%esp)
 80484a6:	ff d0                	call   *%eax
 80484a8:	c9                   	leave  
 80484a9:	c3                   	ret    
 80484aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080484b0 <register_tm_clones>:
 80484b0:	b8 28 a0 04 08       	mov    $0x804a028,%eax
 80484b5:	2d 28 a0 04 08       	sub    $0x804a028,%eax
 80484ba:	c1 f8 02             	sar    $0x2,%eax
 80484bd:	89 c2                	mov    %eax,%edx
 80484bf:	c1 ea 1f             	shr    $0x1f,%edx
 80484c2:	01 d0                	add    %edx,%eax
 80484c4:	d1 f8                	sar    %eax
 80484c6:	75 01                	jne    80484c9 <register_tm_clones+0x19>
 80484c8:	c3                   	ret    
 80484c9:	ba 00 00 00 00       	mov    $0x0,%edx
 80484ce:	85 d2                	test   %edx,%edx
 80484d0:	74 f6                	je     80484c8 <register_tm_clones+0x18>
 80484d2:	55                   	push   %ebp
 80484d3:	89 e5                	mov    %esp,%ebp
 80484d5:	83 ec 18             	sub    $0x18,%esp
 80484d8:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484dc:	c7 04 24 28 a0 04 08 	movl   $0x804a028,(%esp)
 80484e3:	ff d2                	call   *%edx
 80484e5:	c9                   	leave  
 80484e6:	c3                   	ret    
 80484e7:	89 f6                	mov    %esi,%esi
 80484e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080484f0 <__do_global_dtors_aux>:
 80484f0:	80 3d 28 a0 04 08 00 	cmpb   $0x0,0x804a028
 80484f7:	75 13                	jne    804850c <__do_global_dtors_aux+0x1c>
 80484f9:	55                   	push   %ebp
 80484fa:	89 e5                	mov    %esp,%ebp
 80484fc:	83 ec 08             	sub    $0x8,%esp
 80484ff:	e8 7c ff ff ff       	call   8048480 <deregister_tm_clones>
 8048504:	c6 05 28 a0 04 08 01 	movb   $0x1,0x804a028
 804850b:	c9                   	leave  
 804850c:	f3 c3                	repz ret 
 804850e:	66 90                	xchg   %ax,%ax

08048510 <frame_dummy>:
 8048510:	a1 08 9f 04 08       	mov    0x8049f08,%eax
 8048515:	85 c0                	test   %eax,%eax
 8048517:	74 1f                	je     8048538 <frame_dummy+0x28>
 8048519:	b8 00 00 00 00       	mov    $0x0,%eax
 804851e:	85 c0                	test   %eax,%eax
 8048520:	74 16                	je     8048538 <frame_dummy+0x28>
 8048522:	55                   	push   %ebp
 8048523:	89 e5                	mov    %esp,%ebp
 8048525:	83 ec 18             	sub    $0x18,%esp
 8048528:	c7 04 24 08 9f 04 08 	movl   $0x8049f08,(%esp)
 804852f:	ff d0                	call   *%eax
 8048531:	c9                   	leave  
 8048532:	e9 79 ff ff ff       	jmp    80484b0 <register_tm_clones>
 8048537:	90                   	nop
 8048538:	e9 73 ff ff ff       	jmp    80484b0 <register_tm_clones>

0804853d <init_device>:

int g_ready = 0;

// 休眠5秒后才改变 g_ready 的值，以此模拟硬件的操作
void* init_device(void* args)
{
 804853d:	55                   	push   %ebp
 804853e:	89 e5                	mov    %esp,%ebp
 8048540:	83 ec 18             	sub    $0x18,%esp
    sleep(5);
 8048543:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
 804854a:	e8 b1 fe ff ff       	call   8048400 <sleep@plt>

    g_ready = 1;
 804854f:	c7 05 2c a0 04 08 01 	movl   $0x1,0x804a02c
 8048556:	00 00 00 

    printf("init_device() - device status : g_ready = %d\n", g_ready);
 8048559:	a1 2c a0 04 08       	mov    0x804a02c,%eax
 804855e:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048562:	c7 04 24 90 86 04 08 	movl   $0x8048690,(%esp)
 8048569:	e8 82 fe ff ff       	call   80483f0 <printf@plt>
}
 804856e:	c9                   	leave  
 804856f:	c3                   	ret    

08048570 <launch_device>:

void launch_device()
{
 8048570:	55                   	push   %ebp
 8048571:	89 e5                	mov    %esp,%ebp
 8048573:	83 ec 28             	sub    $0x28,%esp
    pthread_t tid = 0;
 8048576:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    pthread_create(&tid, NULL, init_device, NULL);
 804857d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 8048584:	00 
 8048585:	c7 44 24 08 3d 85 04 	movl   $0x804853d,0x8(%esp)
 804858c:	08 
 804858d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8048594:	00 
 8048595:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8048598:	89 04 24             	mov    %eax,(%esp)
 804859b:	e8 90 fe ff ff       	call   8048430 <pthread_create@plt>
}
 80485a0:	c9                   	leave  
 80485a1:	c3                   	ret    

080485a2 <main>:
#include <pthread.h>

extern const int g_ready;

int main()
{
 80485a2:	55                   	push   %ebp
 80485a3:	89 e5                	mov    %esp,%ebp
 80485a5:	83 e4 f0             	and    $0xfffffff0,%esp
 80485a8:	83 ec 10             	sub    $0x10,%esp
    launch_device();
 80485ab:	e8 c0 ff ff ff       	call   8048570 <launch_device>

    while(g_ready == 0)
 80485b0:	eb 21                	jmp    80485d3 <main+0x31>
    {
        sleep(1);
 80485b2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 80485b9:	e8 42 fe ff ff       	call   8048400 <sleep@plt>
        
        printf("main() - launching device : g_ready = %d\n", g_ready);
 80485be:	a1 2c a0 04 08       	mov    0x804a02c,%eax
 80485c3:	89 44 24 04          	mov    %eax,0x4(%esp)
 80485c7:	c7 04 24 c0 86 04 08 	movl   $0x80486c0,(%esp)
 80485ce:	e8 1d fe ff ff       	call   80483f0 <printf@plt>

int main()
{
    launch_device();

    while(g_ready == 0)
 80485d3:	a1 2c a0 04 08       	mov    0x804a02c,%eax
 80485d8:	85 c0                	test   %eax,%eax
 80485da:	74 d6                	je     80485b2 <main+0x10>
        sleep(1);
        
        printf("main() - launching device : g_ready = %d\n", g_ready);
    }
    
    printf("main() - device status : g_ready = %d\n", g_ready);
 80485dc:	a1 2c a0 04 08       	mov    0x804a02c,%eax
 80485e1:	89 44 24 04          	mov    %eax,0x4(%esp)
 80485e5:	c7 04 24 ec 86 04 08 	movl   $0x80486ec,(%esp)
 80485ec:	e8 ff fd ff ff       	call   80483f0 <printf@plt>

    return 0;
 80485f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
 80485f6:	c9                   	leave  
 80485f7:	c3                   	ret    
 80485f8:	66 90                	xchg   %ax,%ax
 80485fa:	66 90                	xchg   %ax,%ax
 80485fc:	66 90                	xchg   %ax,%ax
 80485fe:	66 90                	xchg   %ax,%ax

08048600 <__libc_csu_init>:
 8048600:	55                   	push   %ebp
 8048601:	57                   	push   %edi
 8048602:	31 ff                	xor    %edi,%edi
 8048604:	56                   	push   %esi
 8048605:	53                   	push   %ebx
 8048606:	e8 65 fe ff ff       	call   8048470 <__x86.get_pc_thunk.bx>
 804860b:	81 c3 f5 19 00 00    	add    $0x19f5,%ebx
 8048611:	83 ec 1c             	sub    $0x1c,%esp
 8048614:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048618:	8d b3 04 ff ff ff    	lea    -0xfc(%ebx),%esi
 804861e:	e8 95 fd ff ff       	call   80483b8 <_init>
 8048623:	8d 83 00 ff ff ff    	lea    -0x100(%ebx),%eax
 8048629:	29 c6                	sub    %eax,%esi
 804862b:	c1 fe 02             	sar    $0x2,%esi
 804862e:	85 f6                	test   %esi,%esi
 8048630:	74 27                	je     8048659 <__libc_csu_init+0x59>
 8048632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048638:	8b 44 24 38          	mov    0x38(%esp),%eax
 804863c:	89 2c 24             	mov    %ebp,(%esp)
 804863f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048643:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048647:	89 44 24 04          	mov    %eax,0x4(%esp)
 804864b:	ff 94 bb 00 ff ff ff 	call   *-0x100(%ebx,%edi,4)
 8048652:	83 c7 01             	add    $0x1,%edi
 8048655:	39 f7                	cmp    %esi,%edi
 8048657:	75 df                	jne    8048638 <__libc_csu_init+0x38>
 8048659:	83 c4 1c             	add    $0x1c,%esp
 804865c:	5b                   	pop    %ebx
 804865d:	5e                   	pop    %esi
 804865e:	5f                   	pop    %edi
 804865f:	5d                   	pop    %ebp
 8048660:	c3                   	ret    
 8048661:	eb 0d                	jmp    8048670 <__libc_csu_fini>
 8048663:	90                   	nop
 8048664:	90                   	nop
 8048665:	90                   	nop
 8048666:	90                   	nop
 8048667:	90                   	nop
 8048668:	90                   	nop
 8048669:	90                   	nop
 804866a:	90                   	nop
 804866b:	90                   	nop
 804866c:	90                   	nop
 804866d:	90                   	nop
 804866e:	90                   	nop
 804866f:	90                   	nop

08048670 <__libc_csu_fini>:
 8048670:	f3 c3                	repz ret 

Disassembly of section .fini:

08048674 <_fini>:
 8048674:	53                   	push   %ebx
 8048675:	83 ec 08             	sub    $0x8,%esp
 8048678:	e8 f3 fd ff ff       	call   8048470 <__x86.get_pc_thunk.bx>
 804867d:	81 c3 83 19 00 00    	add    $0x1983,%ebx
 8048683:	83 c4 08             	add    $0x8,%esp
 8048686:	5b                   	pop    %ebx
 8048687:	c3                   	ret    
