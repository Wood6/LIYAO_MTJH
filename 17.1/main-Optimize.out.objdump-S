
main-Optimize.out:     file format elf32-i386


Disassembly of section .init:

080483d8 <_init>:
 80483d8:	53                   	push   %ebx
 80483d9:	83 ec 08             	sub    $0x8,%esp
 80483dc:	e8 ff 00 00 00       	call   80484e0 <__x86.get_pc_thunk.bx>
 80483e1:	81 c3 1f 1c 00 00    	add    $0x1c1f,%ebx
 80483e7:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 80483ed:	85 c0                	test   %eax,%eax
 80483ef:	74 05                	je     80483f6 <_init+0x1e>
 80483f1:	e8 2a 00 00 00       	call   8048420 <__gmon_start__@plt>
 80483f6:	83 c4 08             	add    $0x8,%esp
 80483f9:	5b                   	pop    %ebx
 80483fa:	c3                   	ret    

Disassembly of section .plt:

08048400 <sleep@plt-0x10>:
 8048400:	ff 35 04 a0 04 08    	pushl  0x804a004
 8048406:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804840c:	00 00                	add    %al,(%eax)
	...

08048410 <sleep@plt>:
 8048410:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 8048416:	68 00 00 00 00       	push   $0x0
 804841b:	e9 e0 ff ff ff       	jmp    8048400 <_init+0x28>

08048420 <__gmon_start__@plt>:
 8048420:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048426:	68 08 00 00 00       	push   $0x8
 804842b:	e9 d0 ff ff ff       	jmp    8048400 <_init+0x28>

08048430 <__libc_start_main@plt>:
 8048430:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048436:	68 10 00 00 00       	push   $0x10
 804843b:	e9 c0 ff ff ff       	jmp    8048400 <_init+0x28>

08048440 <__printf_chk@plt>:
 8048440:	ff 25 18 a0 04 08    	jmp    *0x804a018
 8048446:	68 18 00 00 00       	push   $0x18
 804844b:	e9 b0 ff ff ff       	jmp    8048400 <_init+0x28>

08048450 <pthread_create@plt>:
 8048450:	ff 25 1c a0 04 08    	jmp    *0x804a01c
 8048456:	68 20 00 00 00       	push   $0x20
 804845b:	e9 a0 ff ff ff       	jmp    8048400 <_init+0x28>

Disassembly of section .text:

08048460 <main>:
#include <pthread.h>

extern const int g_ready;

int main()
{
 8048460:	55                   	push   %ebp
 8048461:	89 e5                	mov    %esp,%ebp
 8048463:	83 e4 f0             	and    $0xfffffff0,%esp
 8048466:	83 ec 10             	sub    $0x10,%esp
    launch_device();
 8048469:	e8 82 01 00 00       	call   80485f0 <launch_device>

    while(g_ready == 0)
 804846e:	a1 2c a0 04 08       	mov    0x804a02c,%eax
 8048473:	85 c0                	test   %eax,%eax
 8048475:	75 2b                	jne    80484a2 <main+0x42>
 8048477:	90                   	nop
    {
        sleep(1);
 8048478:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804847f:	e8 8c ff ff ff       	call   8048410 <sleep@plt>
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 8048484:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804848b:	00 
 804848c:	c7 44 24 04 18 87 04 	movl   $0x8048718,0x4(%esp)
 8048493:	08 
 8048494:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804849b:	e8 a0 ff ff ff       	call   8048440 <__printf_chk@plt>
 80484a0:	eb d6                	jmp    8048478 <main+0x18>
 80484a2:	89 44 24 08          	mov    %eax,0x8(%esp)
 80484a6:	c7 44 24 04 f0 86 04 	movl   $0x80486f0,0x4(%esp)
 80484ad:	08 
 80484ae:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 80484b5:	e8 86 ff ff ff       	call   8048440 <__printf_chk@plt>
    }
    
    printf("main() - device status : g_ready = %d\n", g_ready);

    return 0;
}
 80484ba:	31 c0                	xor    %eax,%eax
 80484bc:	c9                   	leave  
 80484bd:	c3                   	ret    

080484be <_start>:
 80484be:	31 ed                	xor    %ebp,%ebp
 80484c0:	5e                   	pop    %esi
 80484c1:	89 e1                	mov    %esp,%ecx
 80484c3:	83 e4 f0             	and    $0xfffffff0,%esp
 80484c6:	50                   	push   %eax
 80484c7:	54                   	push   %esp
 80484c8:	52                   	push   %edx
 80484c9:	68 a0 86 04 08       	push   $0x80486a0
 80484ce:	68 30 86 04 08       	push   $0x8048630
 80484d3:	51                   	push   %ecx
 80484d4:	56                   	push   %esi
 80484d5:	68 60 84 04 08       	push   $0x8048460
 80484da:	e8 51 ff ff ff       	call   8048430 <__libc_start_main@plt>
 80484df:	f4                   	hlt    

080484e0 <__x86.get_pc_thunk.bx>:
 80484e0:	8b 1c 24             	mov    (%esp),%ebx
 80484e3:	c3                   	ret    
 80484e4:	66 90                	xchg   %ax,%ax
 80484e6:	66 90                	xchg   %ax,%ax
 80484e8:	66 90                	xchg   %ax,%ax
 80484ea:	66 90                	xchg   %ax,%ax
 80484ec:	66 90                	xchg   %ax,%ax
 80484ee:	66 90                	xchg   %ax,%ax

080484f0 <deregister_tm_clones>:
 80484f0:	b8 2b a0 04 08       	mov    $0x804a02b,%eax
 80484f5:	2d 28 a0 04 08       	sub    $0x804a028,%eax
 80484fa:	83 f8 06             	cmp    $0x6,%eax
 80484fd:	77 01                	ja     8048500 <deregister_tm_clones+0x10>
 80484ff:	c3                   	ret    
 8048500:	b8 00 00 00 00       	mov    $0x0,%eax
 8048505:	85 c0                	test   %eax,%eax
 8048507:	74 f6                	je     80484ff <deregister_tm_clones+0xf>
 8048509:	55                   	push   %ebp
 804850a:	89 e5                	mov    %esp,%ebp
 804850c:	83 ec 18             	sub    $0x18,%esp
 804850f:	c7 04 24 28 a0 04 08 	movl   $0x804a028,(%esp)
 8048516:	ff d0                	call   *%eax
 8048518:	c9                   	leave  
 8048519:	c3                   	ret    
 804851a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08048520 <register_tm_clones>:
 8048520:	b8 28 a0 04 08       	mov    $0x804a028,%eax
 8048525:	2d 28 a0 04 08       	sub    $0x804a028,%eax
 804852a:	c1 f8 02             	sar    $0x2,%eax
 804852d:	89 c2                	mov    %eax,%edx
 804852f:	c1 ea 1f             	shr    $0x1f,%edx
 8048532:	01 d0                	add    %edx,%eax
 8048534:	d1 f8                	sar    %eax
 8048536:	75 01                	jne    8048539 <register_tm_clones+0x19>
 8048538:	c3                   	ret    
 8048539:	ba 00 00 00 00       	mov    $0x0,%edx
 804853e:	85 d2                	test   %edx,%edx
 8048540:	74 f6                	je     8048538 <register_tm_clones+0x18>
 8048542:	55                   	push   %ebp
 8048543:	89 e5                	mov    %esp,%ebp
 8048545:	83 ec 18             	sub    $0x18,%esp
 8048548:	89 44 24 04          	mov    %eax,0x4(%esp)
 804854c:	c7 04 24 28 a0 04 08 	movl   $0x804a028,(%esp)
 8048553:	ff d2                	call   *%edx
 8048555:	c9                   	leave  
 8048556:	c3                   	ret    
 8048557:	89 f6                	mov    %esi,%esi
 8048559:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048560 <__do_global_dtors_aux>:
 8048560:	80 3d 28 a0 04 08 00 	cmpb   $0x0,0x804a028
 8048567:	75 13                	jne    804857c <__do_global_dtors_aux+0x1c>
 8048569:	55                   	push   %ebp
 804856a:	89 e5                	mov    %esp,%ebp
 804856c:	83 ec 08             	sub    $0x8,%esp
 804856f:	e8 7c ff ff ff       	call   80484f0 <deregister_tm_clones>
 8048574:	c6 05 28 a0 04 08 01 	movb   $0x1,0x804a028
 804857b:	c9                   	leave  
 804857c:	f3 c3                	repz ret 
 804857e:	66 90                	xchg   %ax,%ax

08048580 <frame_dummy>:
 8048580:	a1 08 9f 04 08       	mov    0x8049f08,%eax
 8048585:	85 c0                	test   %eax,%eax
 8048587:	74 1f                	je     80485a8 <frame_dummy+0x28>
 8048589:	b8 00 00 00 00       	mov    $0x0,%eax
 804858e:	85 c0                	test   %eax,%eax
 8048590:	74 16                	je     80485a8 <frame_dummy+0x28>
 8048592:	55                   	push   %ebp
 8048593:	89 e5                	mov    %esp,%ebp
 8048595:	83 ec 18             	sub    $0x18,%esp
 8048598:	c7 04 24 08 9f 04 08 	movl   $0x8049f08,(%esp)
 804859f:	ff d0                	call   *%eax
 80485a1:	c9                   	leave  
 80485a2:	e9 79 ff ff ff       	jmp    8048520 <register_tm_clones>
 80485a7:	90                   	nop
 80485a8:	e9 73 ff ff ff       	jmp    8048520 <register_tm_clones>
 80485ad:	66 90                	xchg   %ax,%ax
 80485af:	90                   	nop

080485b0 <init_device>:

int g_ready = 0;

// 休眠5秒后才改变 g_ready 的值，以此模拟硬件的操作
void* init_device(void* args)
{
 80485b0:	83 ec 1c             	sub    $0x1c,%esp
    sleep(5);
 80485b3:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
 80485ba:	e8 51 fe ff ff       	call   8048410 <sleep@plt>
 80485bf:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 80485c6:	00 
 80485c7:	c7 44 24 04 c0 86 04 	movl   $0x80486c0,0x4(%esp)
 80485ce:	08 
 80485cf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)

    g_ready = 1;
 80485d6:	c7 05 2c a0 04 08 01 	movl   $0x1,0x804a02c
 80485dd:	00 00 00 
 80485e0:	e8 5b fe ff ff       	call   8048440 <__printf_chk@plt>

    printf("init_device() - device status : g_ready = %d\n", g_ready);
}
 80485e5:	83 c4 1c             	add    $0x1c,%esp
 80485e8:	c3                   	ret    
 80485e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

080485f0 <launch_device>:

void launch_device()
{
 80485f0:	83 ec 2c             	sub    $0x2c,%esp
    pthread_t tid = 0;

    pthread_create(&tid, NULL, init_device, NULL);
 80485f3:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 80485f7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 80485fe:	00 
 80485ff:	c7 44 24 08 b0 85 04 	movl   $0x80485b0,0x8(%esp)
 8048606:	08 
 8048607:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804860e:	00 
 804860f:	89 04 24             	mov    %eax,(%esp)
    printf("init_device() - device status : g_ready = %d\n", g_ready);
}

void launch_device()
{
    pthread_t tid = 0;
 8048612:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
 8048619:	00 

    pthread_create(&tid, NULL, init_device, NULL);
 804861a:	e8 31 fe ff ff       	call   8048450 <pthread_create@plt>
}
 804861f:	83 c4 2c             	add    $0x2c,%esp
 8048622:	c3                   	ret    
 8048623:	66 90                	xchg   %ax,%ax
 8048625:	66 90                	xchg   %ax,%ax
 8048627:	66 90                	xchg   %ax,%ax
 8048629:	66 90                	xchg   %ax,%ax
 804862b:	66 90                	xchg   %ax,%ax
 804862d:	66 90                	xchg   %ax,%ax
 804862f:	90                   	nop

08048630 <__libc_csu_init>:
 8048630:	55                   	push   %ebp
 8048631:	57                   	push   %edi
 8048632:	31 ff                	xor    %edi,%edi
 8048634:	56                   	push   %esi
 8048635:	53                   	push   %ebx
 8048636:	e8 a5 fe ff ff       	call   80484e0 <__x86.get_pc_thunk.bx>
 804863b:	81 c3 c5 19 00 00    	add    $0x19c5,%ebx
 8048641:	83 ec 1c             	sub    $0x1c,%esp
 8048644:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048648:	8d b3 04 ff ff ff    	lea    -0xfc(%ebx),%esi
 804864e:	e8 85 fd ff ff       	call   80483d8 <_init>
 8048653:	8d 83 00 ff ff ff    	lea    -0x100(%ebx),%eax
 8048659:	29 c6                	sub    %eax,%esi
 804865b:	c1 fe 02             	sar    $0x2,%esi
 804865e:	85 f6                	test   %esi,%esi
 8048660:	74 27                	je     8048689 <__libc_csu_init+0x59>
 8048662:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048668:	8b 44 24 38          	mov    0x38(%esp),%eax
 804866c:	89 2c 24             	mov    %ebp,(%esp)
 804866f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048673:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048677:	89 44 24 04          	mov    %eax,0x4(%esp)
 804867b:	ff 94 bb 00 ff ff ff 	call   *-0x100(%ebx,%edi,4)
 8048682:	83 c7 01             	add    $0x1,%edi
 8048685:	39 f7                	cmp    %esi,%edi
 8048687:	75 df                	jne    8048668 <__libc_csu_init+0x38>
 8048689:	83 c4 1c             	add    $0x1c,%esp
 804868c:	5b                   	pop    %ebx
 804868d:	5e                   	pop    %esi
 804868e:	5f                   	pop    %edi
 804868f:	5d                   	pop    %ebp
 8048690:	c3                   	ret    
 8048691:	eb 0d                	jmp    80486a0 <__libc_csu_fini>
 8048693:	90                   	nop
 8048694:	90                   	nop
 8048695:	90                   	nop
 8048696:	90                   	nop
 8048697:	90                   	nop
 8048698:	90                   	nop
 8048699:	90                   	nop
 804869a:	90                   	nop
 804869b:	90                   	nop
 804869c:	90                   	nop
 804869d:	90                   	nop
 804869e:	90                   	nop
 804869f:	90                   	nop

080486a0 <__libc_csu_fini>:
 80486a0:	f3 c3                	repz ret 

Disassembly of section .fini:

080486a4 <_fini>:
 80486a4:	53                   	push   %ebx
 80486a5:	83 ec 08             	sub    $0x8,%esp
 80486a8:	e8 33 fe ff ff       	call   80484e0 <__x86.get_pc_thunk.bx>
 80486ad:	81 c3 53 19 00 00    	add    $0x1953,%ebx
 80486b3:	83 c4 08             	add    $0x8,%esp
 80486b6:	5b                   	pop    %ebx
 80486b7:	c3                   	ret    
