
main.out:     file format elf32-i386


Disassembly of section .init:

080482d4 <_init>:
 80482d4:	53                   	push   %ebx
 80482d5:	83 ec 08             	sub    $0x8,%esp
 80482d8:	e8 a3 00 00 00       	call   8048380 <__x86.get_pc_thunk.bx>
 80482dd:	81 c3 23 1d 00 00    	add    $0x1d23,%ebx
 80482e3:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 80482e9:	85 c0                	test   %eax,%eax
 80482eb:	74 05                	je     80482f2 <_init+0x1e>
 80482ed:	e8 3e 00 00 00       	call   8048330 <__gmon_start__@plt>
 80482f2:	83 c4 08             	add    $0x8,%esp
 80482f5:	5b                   	pop    %ebx
 80482f6:	c3                   	ret    

Disassembly of section .plt:

08048300 <printf@plt-0x10>:
 8048300:	ff 35 04 a0 04 08    	pushl  0x804a004
 8048306:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804830c:	00 00                	add    %al,(%eax)
	...

08048310 <printf@plt>:
 8048310:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 8048316:	68 00 00 00 00       	push   $0x0
 804831b:	e9 e0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048320 <puts@plt>:
 8048320:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048326:	68 08 00 00 00       	push   $0x8
 804832b:	e9 d0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048330 <__gmon_start__@plt>:
 8048330:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048336:	68 10 00 00 00       	push   $0x10
 804833b:	e9 c0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048340 <__libc_start_main@plt>:
 8048340:	ff 25 18 a0 04 08    	jmp    *0x804a018
 8048346:	68 18 00 00 00       	push   $0x18
 804834b:	e9 b0 ff ff ff       	jmp    8048300 <_init+0x2c>

Disassembly of section .text:

08048350 <_start>:
 8048350:	31 ed                	xor    %ebp,%ebp
 8048352:	5e                   	pop    %esi
 8048353:	89 e1                	mov    %esp,%ecx
 8048355:	83 e4 f0             	and    $0xfffffff0,%esp
 8048358:	50                   	push   %eax
 8048359:	54                   	push   %esp
 804835a:	52                   	push   %edx
 804835b:	68 d0 85 04 08       	push   $0x80485d0
 8048360:	68 60 85 04 08       	push   $0x8048560
 8048365:	51                   	push   %ecx
 8048366:	56                   	push   %esi
 8048367:	68 4d 84 04 08       	push   $0x804844d
 804836c:	e8 cf ff ff ff       	call   8048340 <__libc_start_main@plt>
 8048371:	f4                   	hlt    
 8048372:	66 90                	xchg   %ax,%ax
 8048374:	66 90                	xchg   %ax,%ax
 8048376:	66 90                	xchg   %ax,%ax
 8048378:	66 90                	xchg   %ax,%ax
 804837a:	66 90                	xchg   %ax,%ax
 804837c:	66 90                	xchg   %ax,%ax
 804837e:	66 90                	xchg   %ax,%ax

08048380 <__x86.get_pc_thunk.bx>:
 8048380:	8b 1c 24             	mov    (%esp),%ebx
 8048383:	c3                   	ret    
 8048384:	66 90                	xchg   %ax,%ax
 8048386:	66 90                	xchg   %ax,%ax
 8048388:	66 90                	xchg   %ax,%ax
 804838a:	66 90                	xchg   %ax,%ax
 804838c:	66 90                	xchg   %ax,%ax
 804838e:	66 90                	xchg   %ax,%ax

08048390 <deregister_tm_clones>:
 8048390:	b8 27 a0 04 08       	mov    $0x804a027,%eax
 8048395:	2d 24 a0 04 08       	sub    $0x804a024,%eax
 804839a:	83 f8 06             	cmp    $0x6,%eax
 804839d:	77 01                	ja     80483a0 <deregister_tm_clones+0x10>
 804839f:	c3                   	ret    
 80483a0:	b8 00 00 00 00       	mov    $0x0,%eax
 80483a5:	85 c0                	test   %eax,%eax
 80483a7:	74 f6                	je     804839f <deregister_tm_clones+0xf>
 80483a9:	55                   	push   %ebp
 80483aa:	89 e5                	mov    %esp,%ebp
 80483ac:	83 ec 18             	sub    $0x18,%esp
 80483af:	c7 04 24 24 a0 04 08 	movl   $0x804a024,(%esp)
 80483b6:	ff d0                	call   *%eax
 80483b8:	c9                   	leave  
 80483b9:	c3                   	ret    
 80483ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080483c0 <register_tm_clones>:
 80483c0:	b8 24 a0 04 08       	mov    $0x804a024,%eax
 80483c5:	2d 24 a0 04 08       	sub    $0x804a024,%eax
 80483ca:	c1 f8 02             	sar    $0x2,%eax
 80483cd:	89 c2                	mov    %eax,%edx
 80483cf:	c1 ea 1f             	shr    $0x1f,%edx
 80483d2:	01 d0                	add    %edx,%eax
 80483d4:	d1 f8                	sar    %eax
 80483d6:	75 01                	jne    80483d9 <register_tm_clones+0x19>
 80483d8:	c3                   	ret    
 80483d9:	ba 00 00 00 00       	mov    $0x0,%edx
 80483de:	85 d2                	test   %edx,%edx
 80483e0:	74 f6                	je     80483d8 <register_tm_clones+0x18>
 80483e2:	55                   	push   %ebp
 80483e3:	89 e5                	mov    %esp,%ebp
 80483e5:	83 ec 18             	sub    $0x18,%esp
 80483e8:	89 44 24 04          	mov    %eax,0x4(%esp)
 80483ec:	c7 04 24 24 a0 04 08 	movl   $0x804a024,(%esp)
 80483f3:	ff d2                	call   *%edx
 80483f5:	c9                   	leave  
 80483f6:	c3                   	ret    
 80483f7:	89 f6                	mov    %esi,%esi
 80483f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048400 <__do_global_dtors_aux>:
 8048400:	80 3d 24 a0 04 08 00 	cmpb   $0x0,0x804a024
 8048407:	75 13                	jne    804841c <__do_global_dtors_aux+0x1c>
 8048409:	55                   	push   %ebp
 804840a:	89 e5                	mov    %esp,%ebp
 804840c:	83 ec 08             	sub    $0x8,%esp
 804840f:	e8 7c ff ff ff       	call   8048390 <deregister_tm_clones>
 8048414:	c6 05 24 a0 04 08 01 	movb   $0x1,0x804a024
 804841b:	c9                   	leave  
 804841c:	f3 c3                	repz ret 
 804841e:	66 90                	xchg   %ax,%ax

08048420 <frame_dummy>:
 8048420:	a1 10 9f 04 08       	mov    0x8049f10,%eax
 8048425:	85 c0                	test   %eax,%eax
 8048427:	74 1f                	je     8048448 <frame_dummy+0x28>
 8048429:	b8 00 00 00 00       	mov    $0x0,%eax
 804842e:	85 c0                	test   %eax,%eax
 8048430:	74 16                	je     8048448 <frame_dummy+0x28>
 8048432:	55                   	push   %ebp
 8048433:	89 e5                	mov    %esp,%ebp
 8048435:	83 ec 18             	sub    $0x18,%esp
 8048438:	c7 04 24 10 9f 04 08 	movl   $0x8049f10,(%esp)
 804843f:	ff d0                	call   *%eax
 8048441:	c9                   	leave  
 8048442:	e9 79 ff ff ff       	jmp    80483c0 <register_tm_clones>
 8048447:	90                   	nop
 8048448:	e9 73 ff ff ff       	jmp    80483c0 <register_tm_clones>

0804844d <main>:
// c语言内嵌汇编体验
#include <stdio.h>
#include <stdlib.h>

int main()
{
 804844d:	55                   	push   %ebp
 804844e:	89 e5                	mov    %esp,%ebp
 8048450:	53                   	push   %ebx
 8048451:	83 e4 f0             	and    $0xfffffff0,%esp
 8048454:	83 ec 20             	sub    $0x20,%esp
    int result = 0;
 8048457:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 804845e:	00 
    int input = 1;
 804845f:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%esp)
 8048466:	00 

    int a = 2;
 8048467:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%esp)
 804846e:	00 
    int b = 3;
 804846f:	c7 44 24 1c 03 00 00 	movl   $0x3,0x1c(%esp)
 8048476:	00 
	
	printf("result = %d\n", result);
 8048477:	8b 44 24 10          	mov    0x10(%esp),%eax
 804847b:	89 44 24 04          	mov    %eax,0x4(%esp)
 804847f:	c7 04 24 f0 85 04 08 	movl   $0x80485f0,(%esp)
 8048486:	e8 85 fe ff ff       	call   8048310 <printf@plt>
	printf("input = %d\n", input);
 804848b:	8b 44 24 14          	mov    0x14(%esp),%eax
 804848f:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048493:	c7 04 24 fd 85 04 08 	movl   $0x80485fd,(%esp)
 804849a:	e8 71 fe ff ff       	call   8048310 <printf@plt>
	printf("a = %d\n", a);
 804849f:	8b 44 24 18          	mov    0x18(%esp),%eax
 80484a3:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484a7:	c7 04 24 09 86 04 08 	movl   $0x8048609,(%esp)
 80484ae:	e8 5d fe ff ff       	call   8048310 <printf@plt>
	printf("b = %d\n", b);
 80484b3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80484b7:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484bb:	c7 04 24 11 86 04 08 	movl   $0x8048611,(%esp)
 80484c2:	e8 49 fe ff ff       	call   8048310 <printf@plt>
	printf("==================================\n");
 80484c7:	c7 04 24 1c 86 04 08 	movl   $0x804861c,(%esp)
 80484ce:	e8 4d fe ff ff       	call   8048320 <puts@plt>
	
	// 将 input 的值赋值给 result
    asm volatile (
 80484d3:	8b 44 24 14          	mov    0x14(%esp),%eax
 80484d7:	89 c0                	mov    %eax,%eax
 80484d9:	89 44 24 10          	mov    %eax,0x10(%esp)
                          // %1表示寄存器列表中的第2个寄存器，以此类推
        : "=r"(result)    // 输出变量与esi或edi寄存器关联（其中esi或edi由编译器自动分配）
        : "r"(input)      // 输入变量与esi或edi寄存器关联
    );

    printf("result = %d\n", result); // 1
 80484dd:	8b 44 24 10          	mov    0x10(%esp),%eax
 80484e1:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484e5:	c7 04 24 f0 85 04 08 	movl   $0x80485f0,(%esp)
 80484ec:	e8 1f fe ff ff       	call   8048310 <printf@plt>
    printf("input = %d\n", input);   // 1
 80484f1:	8b 44 24 14          	mov    0x14(%esp),%eax
 80484f5:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484f9:	c7 04 24 fd 85 04 08 	movl   $0x80485fd,(%esp)
 8048500:	e8 0b fe ff ff       	call   8048310 <printf@plt>

    // 交换a和b的值
    asm volatile(
 8048505:	8b 44 24 18          	mov    0x18(%esp),%eax
 8048509:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 804850d:	89 d3                	mov    %edx,%ebx
 804850f:	89 c1                	mov    %eax,%ecx
 8048511:	89 d8                	mov    %ebx,%eax
 8048513:	89 cb                	mov    %ecx,%ebx
 8048515:	89 da                	mov    %ebx,%edx
 8048517:	89 44 24 18          	mov    %eax,0x18(%esp)
 804851b:	89 54 24 1c          	mov    %edx,0x1c(%esp)
        "movl %%ecx, %%ebx\n"
        : "=a"(a), "=b"(b)   // 将eax输出到a，ebx输出到b
        : "a"(a), "b"(b)     // a放入eax，b放入ebx
        );

    printf("a = %d\n", a);   // a = 3
 804851f:	8b 44 24 18          	mov    0x18(%esp),%eax
 8048523:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048527:	c7 04 24 09 86 04 08 	movl   $0x8048609,(%esp)
 804852e:	e8 dd fd ff ff       	call   8048310 <printf@plt>
    printf("b = %d\n", b);   // b = 2
 8048533:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8048537:	89 44 24 04          	mov    %eax,0x4(%esp)
 804853b:	c7 04 24 11 86 04 08 	movl   $0x8048611,(%esp)
 8048542:	e8 c9 fd ff ff       	call   8048310 <printf@plt>

    return 0;
 8048547:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804854c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804854f:	c9                   	leave  
 8048550:	c3                   	ret    
 8048551:	66 90                	xchg   %ax,%ax
 8048553:	66 90                	xchg   %ax,%ax
 8048555:	66 90                	xchg   %ax,%ax
 8048557:	66 90                	xchg   %ax,%ax
 8048559:	66 90                	xchg   %ax,%ax
 804855b:	66 90                	xchg   %ax,%ax
 804855d:	66 90                	xchg   %ax,%ax
 804855f:	90                   	nop

08048560 <__libc_csu_init>:
 8048560:	55                   	push   %ebp
 8048561:	57                   	push   %edi
 8048562:	31 ff                	xor    %edi,%edi
 8048564:	56                   	push   %esi
 8048565:	53                   	push   %ebx
 8048566:	e8 15 fe ff ff       	call   8048380 <__x86.get_pc_thunk.bx>
 804856b:	81 c3 95 1a 00 00    	add    $0x1a95,%ebx
 8048571:	83 ec 1c             	sub    $0x1c,%esp
 8048574:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048578:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 804857e:	e8 51 fd ff ff       	call   80482d4 <_init>
 8048583:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 8048589:	29 c6                	sub    %eax,%esi
 804858b:	c1 fe 02             	sar    $0x2,%esi
 804858e:	85 f6                	test   %esi,%esi
 8048590:	74 27                	je     80485b9 <__libc_csu_init+0x59>
 8048592:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048598:	8b 44 24 38          	mov    0x38(%esp),%eax
 804859c:	89 2c 24             	mov    %ebp,(%esp)
 804859f:	89 44 24 08          	mov    %eax,0x8(%esp)
 80485a3:	8b 44 24 34          	mov    0x34(%esp),%eax
 80485a7:	89 44 24 04          	mov    %eax,0x4(%esp)
 80485ab:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 80485b2:	83 c7 01             	add    $0x1,%edi
 80485b5:	39 f7                	cmp    %esi,%edi
 80485b7:	75 df                	jne    8048598 <__libc_csu_init+0x38>
 80485b9:	83 c4 1c             	add    $0x1c,%esp
 80485bc:	5b                   	pop    %ebx
 80485bd:	5e                   	pop    %esi
 80485be:	5f                   	pop    %edi
 80485bf:	5d                   	pop    %ebp
 80485c0:	c3                   	ret    
 80485c1:	eb 0d                	jmp    80485d0 <__libc_csu_fini>
 80485c3:	90                   	nop
 80485c4:	90                   	nop
 80485c5:	90                   	nop
 80485c6:	90                   	nop
 80485c7:	90                   	nop
 80485c8:	90                   	nop
 80485c9:	90                   	nop
 80485ca:	90                   	nop
 80485cb:	90                   	nop
 80485cc:	90                   	nop
 80485cd:	90                   	nop
 80485ce:	90                   	nop
 80485cf:	90                   	nop

080485d0 <__libc_csu_fini>:
 80485d0:	f3 c3                	repz ret 

Disassembly of section .fini:

080485d4 <_fini>:
 80485d4:	53                   	push   %ebx
 80485d5:	83 ec 08             	sub    $0x8,%esp
 80485d8:	e8 a3 fd ff ff       	call   8048380 <__x86.get_pc_thunk.bx>
 80485dd:	81 c3 23 1a 00 00    	add    $0x1a23,%ebx
 80485e3:	83 c4 08             	add    $0x8,%esp
 80485e6:	5b                   	pop    %ebx
 80485e7:	c3                   	ret    
