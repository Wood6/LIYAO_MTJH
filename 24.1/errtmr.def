#include "errtmr.h"

static const char *g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_STATE_INVSTATE) + 1];

void errstr_MODULE_TIMER_init ()
{
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_ALLOC_INVHANDLE)] = "ERROR_TIMER_ALLOC_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_ALLOC_INVCB)] = "ERROR_TIMER_ALLOC_INVCB";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_ALLOC_NOTIMER)] = "ERROR_TIMER_ALLOC_NOTIMER";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_FREE_INVHANDLE)] = "ERROR_TIMER_FREE_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_START_INVHANDLE)] = "ERROR_TIMER_START_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_START_INVSTATE)] = "ERROR_TIMER_START_INVSTATE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_RESTART_INVHANDLE)] = "ERROR_TIMER_RESTART_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_RESTART_INVSTATE)] = "ERROR_TIMER_RESTART_INVSTATE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_STOP_INVHANDLE)] = "ERROR_TIMER_STOP_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_STOP_INVSTATE)] = "ERROR_TIMER_STOP_INVSTATE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_STATE_INVSTATE)] = "ERROR_TIMER_STATE_INVSTATE";

    g_errstr_array[MODULE_TIMER].available_ = 1;
    g_errstr_array[MODULE_TIMER].last_error_ = MODULE_ERROR(ERROR_TIMER_STATE_INVSTATE);
    g_errstr_array[MODULE_TIMER].error_array_ = g_errstr_MODULE_TIMER;
}


static void errstr_init ()
{
    errstr_MODULE_TIMER_init ();
}
