
main.out:     file format elf32-i386


Disassembly of section .init:

080482d4 <_init>:
 80482d4:	53                   	push   %ebx
 80482d5:	83 ec 08             	sub    $0x8,%esp
 80482d8:	e8 a3 00 00 00       	call   8048380 <__x86.get_pc_thunk.bx>
 80482dd:	81 c3 23 1d 00 00    	add    $0x1d23,%ebx
 80482e3:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 80482e9:	85 c0                	test   %eax,%eax
 80482eb:	74 05                	je     80482f2 <_init+0x1e>
 80482ed:	e8 3e 00 00 00       	call   8048330 <__gmon_start__@plt>
 80482f2:	83 c4 08             	add    $0x8,%esp
 80482f5:	5b                   	pop    %ebx
 80482f6:	c3                   	ret    

Disassembly of section .plt:

08048300 <printf@plt-0x10>:
 8048300:	ff 35 04 a0 04 08    	pushl  0x804a004
 8048306:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804830c:	00 00                	add    %al,(%eax)
	...

08048310 <printf@plt>:
 8048310:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 8048316:	68 00 00 00 00       	push   $0x0
 804831b:	e9 e0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048320 <puts@plt>:
 8048320:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048326:	68 08 00 00 00       	push   $0x8
 804832b:	e9 d0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048330 <__gmon_start__@plt>:
 8048330:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048336:	68 10 00 00 00       	push   $0x10
 804833b:	e9 c0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048340 <__libc_start_main@plt>:
 8048340:	ff 25 18 a0 04 08    	jmp    *0x804a018
 8048346:	68 18 00 00 00       	push   $0x18
 804834b:	e9 b0 ff ff ff       	jmp    8048300 <_init+0x2c>

Disassembly of section .text:

08048350 <_start>:
 8048350:	31 ed                	xor    %ebp,%ebp
 8048352:	5e                   	pop    %esi
 8048353:	89 e1                	mov    %esp,%ecx
 8048355:	83 e4 f0             	and    $0xfffffff0,%esp
 8048358:	50                   	push   %eax
 8048359:	54                   	push   %esp
 804835a:	52                   	push   %edx
 804835b:	68 90 86 04 08       	push   $0x8048690
 8048360:	68 20 86 04 08       	push   $0x8048620
 8048365:	51                   	push   %ecx
 8048366:	56                   	push   %esi
 8048367:	68 d6 85 04 08       	push   $0x80485d6
 804836c:	e8 cf ff ff ff       	call   8048340 <__libc_start_main@plt>
 8048371:	f4                   	hlt    
 8048372:	66 90                	xchg   %ax,%ax
 8048374:	66 90                	xchg   %ax,%ax
 8048376:	66 90                	xchg   %ax,%ax
 8048378:	66 90                	xchg   %ax,%ax
 804837a:	66 90                	xchg   %ax,%ax
 804837c:	66 90                	xchg   %ax,%ax
 804837e:	66 90                	xchg   %ax,%ax

08048380 <__x86.get_pc_thunk.bx>:
 8048380:	8b 1c 24             	mov    (%esp),%ebx
 8048383:	c3                   	ret    
 8048384:	66 90                	xchg   %ax,%ax
 8048386:	66 90                	xchg   %ax,%ax
 8048388:	66 90                	xchg   %ax,%ax
 804838a:	66 90                	xchg   %ax,%ax
 804838c:	66 90                	xchg   %ax,%ax
 804838e:	66 90                	xchg   %ax,%ax

08048390 <deregister_tm_clones>:
 8048390:	b8 27 a0 04 08       	mov    $0x804a027,%eax
 8048395:	2d 24 a0 04 08       	sub    $0x804a024,%eax
 804839a:	83 f8 06             	cmp    $0x6,%eax
 804839d:	77 01                	ja     80483a0 <deregister_tm_clones+0x10>
 804839f:	c3                   	ret    
 80483a0:	b8 00 00 00 00       	mov    $0x0,%eax
 80483a5:	85 c0                	test   %eax,%eax
 80483a7:	74 f6                	je     804839f <deregister_tm_clones+0xf>
 80483a9:	55                   	push   %ebp
 80483aa:	89 e5                	mov    %esp,%ebp
 80483ac:	83 ec 18             	sub    $0x18,%esp
 80483af:	c7 04 24 24 a0 04 08 	movl   $0x804a024,(%esp)
 80483b6:	ff d0                	call   *%eax
 80483b8:	c9                   	leave  
 80483b9:	c3                   	ret    
 80483ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080483c0 <register_tm_clones>:
 80483c0:	b8 24 a0 04 08       	mov    $0x804a024,%eax
 80483c5:	2d 24 a0 04 08       	sub    $0x804a024,%eax
 80483ca:	c1 f8 02             	sar    $0x2,%eax
 80483cd:	89 c2                	mov    %eax,%edx
 80483cf:	c1 ea 1f             	shr    $0x1f,%edx
 80483d2:	01 d0                	add    %edx,%eax
 80483d4:	d1 f8                	sar    %eax
 80483d6:	75 01                	jne    80483d9 <register_tm_clones+0x19>
 80483d8:	c3                   	ret    
 80483d9:	ba 00 00 00 00       	mov    $0x0,%edx
 80483de:	85 d2                	test   %edx,%edx
 80483e0:	74 f6                	je     80483d8 <register_tm_clones+0x18>
 80483e2:	55                   	push   %ebp
 80483e3:	89 e5                	mov    %esp,%ebp
 80483e5:	83 ec 18             	sub    $0x18,%esp
 80483e8:	89 44 24 04          	mov    %eax,0x4(%esp)
 80483ec:	c7 04 24 24 a0 04 08 	movl   $0x804a024,(%esp)
 80483f3:	ff d2                	call   *%edx
 80483f5:	c9                   	leave  
 80483f6:	c3                   	ret    
 80483f7:	89 f6                	mov    %esi,%esi
 80483f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048400 <__do_global_dtors_aux>:
 8048400:	80 3d 24 a0 04 08 00 	cmpb   $0x0,0x804a024
 8048407:	75 13                	jne    804841c <__do_global_dtors_aux+0x1c>
 8048409:	55                   	push   %ebp
 804840a:	89 e5                	mov    %esp,%ebp
 804840c:	83 ec 08             	sub    $0x8,%esp
 804840f:	e8 7c ff ff ff       	call   8048390 <deregister_tm_clones>
 8048414:	c6 05 24 a0 04 08 01 	movb   $0x1,0x804a024
 804841b:	c9                   	leave  
 804841c:	f3 c3                	repz ret 
 804841e:	66 90                	xchg   %ax,%ax

08048420 <frame_dummy>:
 8048420:	a1 10 9f 04 08       	mov    0x8049f10,%eax
 8048425:	85 c0                	test   %eax,%eax
 8048427:	74 1f                	je     8048448 <frame_dummy+0x28>
 8048429:	b8 00 00 00 00       	mov    $0x0,%eax
 804842e:	85 c0                	test   %eax,%eax
 8048430:	74 16                	je     8048448 <frame_dummy+0x28>
 8048432:	55                   	push   %ebp
 8048433:	89 e5                	mov    %esp,%ebp
 8048435:	83 ec 18             	sub    $0x18,%esp
 8048438:	c7 04 24 10 9f 04 08 	movl   $0x8049f10,(%esp)
 804843f:	ff d0                	call   *%eax
 8048441:	c9                   	leave  
 8048442:	e9 79 ff ff ff       	jmp    80483c0 <register_tm_clones>
 8048447:	90                   	nop
 8048448:	e9 73 ff ff ff       	jmp    80483c0 <register_tm_clones>

0804844d <f>:
	int y;
	int z;
};

struct ST f(int x, int y, int z)
{
 804844d:	55                   	push   %ebp
 804844e:	89 e5                	mov    %esp,%ebp
 8048450:	83 ec 28             	sub    $0x28,%esp
	struct ST st = {0};
 8048453:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
 804845a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
 8048461:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	
	printf("f() : &st = %p\n", &st);
 8048468:	8d 45 ec             	lea    -0x14(%ebp),%eax
 804846b:	89 44 24 04          	mov    %eax,0x4(%esp)
 804846f:	c7 04 24 b0 86 04 08 	movl   $0x80486b0,(%esp)
 8048476:	e8 95 fe ff ff       	call   8048310 <printf@plt>
	
	st.x = x;
 804847b:	8b 45 0c             	mov    0xc(%ebp),%eax
 804847e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	st.y = y;
 8048481:	8b 45 10             	mov    0x10(%ebp),%eax
 8048484:	89 45 f0             	mov    %eax,-0x10(%ebp)
	st.z = z;
 8048487:	8b 45 14             	mov    0x14(%ebp),%eax
 804848a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	
	return st;
 804848d:	8b 45 08             	mov    0x8(%ebp),%eax
 8048490:	8b 55 ec             	mov    -0x14(%ebp),%edx
 8048493:	89 10                	mov    %edx,(%eax)
 8048495:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8048498:	89 50 04             	mov    %edx,0x4(%eax)
 804849b:	8b 55 f4             	mov    -0xc(%ebp),%edx
 804849e:	89 50 08             	mov    %edx,0x8(%eax)
}
 80484a1:	8b 45 08             	mov    0x8(%ebp),%eax
 80484a4:	c9                   	leave  
 80484a5:	c2 04 00             	ret    $0x4

080484a8 <assign>:

// 函数返回值用于赋值操作
void assign()
{
 80484a8:	55                   	push   %ebp
 80484a9:	89 e5                	mov    %esp,%ebp
 80484ab:	83 ec 38             	sub    $0x38,%esp
	struct ST st = {0};
 80484ae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
 80484b5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
 80484bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	
	printf("assign() : &st = %p\n", &st);
 80484c3:	8d 45 ec             	lea    -0x14(%ebp),%eax
 80484c6:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484ca:	c7 04 24 c0 86 04 08 	movl   $0x80486c0,(%esp)
 80484d1:	e8 3a fe ff ff       	call   8048310 <printf@plt>
	
	st = f(1, 2, 3);
 80484d6:	8d 45 d8             	lea    -0x28(%ebp),%eax
 80484d9:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
 80484e0:	00 
 80484e1:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 80484e8:	00 
 80484e9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 80484f0:	00 
 80484f1:	89 04 24             	mov    %eax,(%esp)
 80484f4:	e8 54 ff ff ff       	call   804844d <f>
 80484f9:	83 ec 04             	sub    $0x4,%esp
 80484fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
 80484ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
 8048502:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8048505:	89 45 f0             	mov    %eax,-0x10(%ebp)
 8048508:	8b 45 e0             	mov    -0x20(%ebp),%eax
 804850b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	
	printf("assign() : &st = %p\n", &st);
 804850e:	8d 45 ec             	lea    -0x14(%ebp),%eax
 8048511:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048515:	c7 04 24 c0 86 04 08 	movl   $0x80486c0,(%esp)
 804851c:	e8 ef fd ff ff       	call   8048310 <printf@plt>
	printf("assign() : st.x = %d\n", st.x);
 8048521:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8048524:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048528:	c7 04 24 d5 86 04 08 	movl   $0x80486d5,(%esp)
 804852f:	e8 dc fd ff ff       	call   8048310 <printf@plt>
	printf("assign() : st.y = %d\n", st.y);
 8048534:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8048537:	89 44 24 04          	mov    %eax,0x4(%esp)
 804853b:	c7 04 24 eb 86 04 08 	movl   $0x80486eb,(%esp)
 8048542:	e8 c9 fd ff ff       	call   8048310 <printf@plt>
	printf("assign() : st.z = %d\n", st.z);
 8048547:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804854a:	89 44 24 04          	mov    %eax,0x4(%esp)
 804854e:	c7 04 24 01 87 04 08 	movl   $0x8048701,(%esp)
 8048555:	e8 b6 fd ff ff       	call   8048310 <printf@plt>
}
 804855a:	c9                   	leave  
 804855b:	c3                   	ret    

0804855c <init>:

// 函数返回值用于初始化
void init()
{
 804855c:	55                   	push   %ebp
 804855d:	89 e5                	mov    %esp,%ebp
 804855f:	83 ec 28             	sub    $0x28,%esp
	struct ST st = f(4, 5, 6);
 8048562:	8d 45 ec             	lea    -0x14(%ebp),%eax
 8048565:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
 804856c:	00 
 804856d:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
 8048574:	00 
 8048575:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
 804857c:	00 
 804857d:	89 04 24             	mov    %eax,(%esp)
 8048580:	e8 c8 fe ff ff       	call   804844d <f>
 8048585:	83 ec 04             	sub    $0x4,%esp
	
	printf("init() : &st = %p\n", &st);
 8048588:	8d 45 ec             	lea    -0x14(%ebp),%eax
 804858b:	89 44 24 04          	mov    %eax,0x4(%esp)
 804858f:	c7 04 24 17 87 04 08 	movl   $0x8048717,(%esp)
 8048596:	e8 75 fd ff ff       	call   8048310 <printf@plt>
	printf("init() : st.x = %d\n", st.x);
 804859b:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804859e:	89 44 24 04          	mov    %eax,0x4(%esp)
 80485a2:	c7 04 24 2a 87 04 08 	movl   $0x804872a,(%esp)
 80485a9:	e8 62 fd ff ff       	call   8048310 <printf@plt>
	printf("init() : st.y = %d\n", st.y);
 80485ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80485b1:	89 44 24 04          	mov    %eax,0x4(%esp)
 80485b5:	c7 04 24 3e 87 04 08 	movl   $0x804873e,(%esp)
 80485bc:	e8 4f fd ff ff       	call   8048310 <printf@plt>
	printf("init() : st.z = %d\n", st.z);
 80485c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80485c4:	89 44 24 04          	mov    %eax,0x4(%esp)
 80485c8:	c7 04 24 52 87 04 08 	movl   $0x8048752,(%esp)
 80485cf:	e8 3c fd ff ff       	call   8048310 <printf@plt>
}
 80485d4:	c9                   	leave  
 80485d5:	c3                   	ret    

080485d6 <main>:

int main()
{
 80485d6:	55                   	push   %ebp
 80485d7:	89 e5                	mov    %esp,%ebp
 80485d9:	83 e4 f0             	and    $0xfffffff0,%esp
 80485dc:	83 ec 10             	sub    $0x10,%esp
	printf("---------------------\n");
 80485df:	c7 04 24 66 87 04 08 	movl   $0x8048766,(%esp)
 80485e6:	e8 35 fd ff ff       	call   8048320 <puts@plt>
	init();
 80485eb:	e8 6c ff ff ff       	call   804855c <init>
	printf("---------------------\n");
 80485f0:	c7 04 24 66 87 04 08 	movl   $0x8048766,(%esp)
 80485f7:	e8 24 fd ff ff       	call   8048320 <puts@plt>
	assign();
 80485fc:	e8 a7 fe ff ff       	call   80484a8 <assign>
	printf("---------------------\n");
 8048601:	c7 04 24 66 87 04 08 	movl   $0x8048766,(%esp)
 8048608:	e8 13 fd ff ff       	call   8048320 <puts@plt>
	
	return 0;
 804860d:	b8 00 00 00 00       	mov    $0x0,%eax
 8048612:	c9                   	leave  
 8048613:	c3                   	ret    
 8048614:	66 90                	xchg   %ax,%ax
 8048616:	66 90                	xchg   %ax,%ax
 8048618:	66 90                	xchg   %ax,%ax
 804861a:	66 90                	xchg   %ax,%ax
 804861c:	66 90                	xchg   %ax,%ax
 804861e:	66 90                	xchg   %ax,%ax

08048620 <__libc_csu_init>:
 8048620:	55                   	push   %ebp
 8048621:	57                   	push   %edi
 8048622:	31 ff                	xor    %edi,%edi
 8048624:	56                   	push   %esi
 8048625:	53                   	push   %ebx
 8048626:	e8 55 fd ff ff       	call   8048380 <__x86.get_pc_thunk.bx>
 804862b:	81 c3 d5 19 00 00    	add    $0x19d5,%ebx
 8048631:	83 ec 1c             	sub    $0x1c,%esp
 8048634:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048638:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 804863e:	e8 91 fc ff ff       	call   80482d4 <_init>
 8048643:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 8048649:	29 c6                	sub    %eax,%esi
 804864b:	c1 fe 02             	sar    $0x2,%esi
 804864e:	85 f6                	test   %esi,%esi
 8048650:	74 27                	je     8048679 <__libc_csu_init+0x59>
 8048652:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048658:	8b 44 24 38          	mov    0x38(%esp),%eax
 804865c:	89 2c 24             	mov    %ebp,(%esp)
 804865f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048663:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048667:	89 44 24 04          	mov    %eax,0x4(%esp)
 804866b:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 8048672:	83 c7 01             	add    $0x1,%edi
 8048675:	39 f7                	cmp    %esi,%edi
 8048677:	75 df                	jne    8048658 <__libc_csu_init+0x38>
 8048679:	83 c4 1c             	add    $0x1c,%esp
 804867c:	5b                   	pop    %ebx
 804867d:	5e                   	pop    %esi
 804867e:	5f                   	pop    %edi
 804867f:	5d                   	pop    %ebp
 8048680:	c3                   	ret    
 8048681:	eb 0d                	jmp    8048690 <__libc_csu_fini>
 8048683:	90                   	nop
 8048684:	90                   	nop
 8048685:	90                   	nop
 8048686:	90                   	nop
 8048687:	90                   	nop
 8048688:	90                   	nop
 8048689:	90                   	nop
 804868a:	90                   	nop
 804868b:	90                   	nop
 804868c:	90                   	nop
 804868d:	90                   	nop
 804868e:	90                   	nop
 804868f:	90                   	nop

08048690 <__libc_csu_fini>:
 8048690:	f3 c3                	repz ret 

Disassembly of section .fini:

08048694 <_fini>:
 8048694:	53                   	push   %ebx
 8048695:	83 ec 08             	sub    $0x8,%esp
 8048698:	e8 e3 fc ff ff       	call   8048380 <__x86.get_pc_thunk.bx>
 804869d:	81 c3 63 19 00 00    	add    $0x1963,%ebx
 80486a3:	83 c4 08             	add    $0x8,%esp
 80486a6:	5b                   	pop    %ebx
 80486a7:	c3                   	ret    
