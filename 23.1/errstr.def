#include "errtmr.h"

static const char *g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_STATE_INVSTATE) + 1];

void errstr_MODULE_TIMER_init ()
{
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_ALLOC_INVHANDLE)] = "ERROR_TIMER_ALLOC_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_ALLOC_INVCB)] = "ERROR_TIMER_ALLOC_INVCB";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_ALLOC_NOTIMER)] = "ERROR_TIMER_ALLOC_NOTIMER";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_FREE_INVHANDLE)] = "ERROR_TIMER_FREE_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_START_INVHANDLE)] = "ERROR_TIMER_START_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_START_INVSTATE)] = "ERROR_TIMER_START_INVSTATE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_RESTART_INVHANDLE)] = "ERROR_TIMER_RESTART_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_RESTART_INVSTATE)] = "ERROR_TIMER_RESTART_INVSTATE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_STOP_INVHANDLE)] = "ERROR_TIMER_STOP_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_STOP_INVSTATE)] = "ERROR_TIMER_STOP_INVSTATE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_STATE_INVSTATE)] = "ERROR_TIMER_STATE_INVSTATE";

    g_errstr_array[MODULE_TIMER].available_ = 1;
    g_errstr_array[MODULE_TIMER].last_error_ = MODULE_ERROR(ERROR_TIMER_STATE_INVSTATE);
    g_errstr_array[MODULE_TIMER].error_array_ = g_errstr_MODULE_TIMER;
}

#include "errheap.h"

static const char *g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVMTAIL) + 1];

void errstr_MODULE_HEAP_init ()
{
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_INIT_INVADDR)] = "ERROR_HEAP_INIT_INVADDR";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_INIT_INVALIGN)] = "ERROR_HEAP_INIT_INVALIGN";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_ALLOC_NOTINIT)] = "ERROR_HEAP_ALLOC_NOTINIT";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_ALLOC_INVSIZE)] = "ERROR_HEAP_ALLOC_INVSIZE";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_ALLOC_INVLOC)] = "ERROR_HEAP_ALLOC_INVLOC";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_ALLOC_NOMEM1)] = "ERROR_HEAP_ALLOC_NOMEM1";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_ALLOC_NOMEM2)] = "ERROR_HEAP_ALLOC_NOMEM2";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_ALLOC_INVCONTEXT)] = "ERROR_HEAP_ALLOC_INVCONTEXT";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_NOTINIT)] = "ERROR_HEAP_FREE_NOTINIT";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVSIZE)] = "ERROR_HEAP_FREE_INVSIZE";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVBUF)] = "ERROR_HEAP_FREE_INVBUF";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVMBLOCK1)] = "ERROR_HEAP_FREE_INVMBLOCK1";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVMBLOCK2)] = "ERROR_HEAP_FREE_INVMBLOCK2";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVMBLOCK3)] = "ERROR_HEAP_FREE_INVMBLOCK3";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVMHEAD)] = "ERROR_HEAP_FREE_INVMHEAD";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVMTAIL)] = "ERROR_HEAP_FREE_INVMTAIL";

    g_errstr_array[MODULE_HEAP].available_ = 1;
    g_errstr_array[MODULE_HEAP].last_error_ = MODULE_ERROR(ERROR_HEAP_FREE_INVMTAIL);
    g_errstr_array[MODULE_HEAP].error_array_ = g_errstr_MODULE_HEAP;
}


static void errstr_init ()
{
    errstr_MODULE_TIMER_init ();
    errstr_MODULE_HEAP_init ();
}
